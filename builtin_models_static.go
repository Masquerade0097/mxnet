// Code generated by go-bindata.
// sources:
// builtin_models/BVLC-AlexNet.yml
// builtin_models/SSD_512_VGG16_Atrous_VOC.yml
// builtin_models/SSD_MobileNet_v1_COCO.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bvlcAlexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x5b\x8f\xdc\xb6\x0e\x7e\xf7\xaf\x20\x30\x08\xb2\x39\x67\x7c\x9b\xfb\xf8\xe0\x04\x6d\xd3\x3e\x14\x68\xf6\xa1\x37\x14\x08\x82\x05\x2d\xd1\x63\x65\x6d\xc9\x90\xe8\xd9\xdd\xfc\xfa\x42\xb2\x3d\x9e\x6d\x16\x4d\xfb\x32\x63\x93\xdf\x47\x91\x14\x2f\xd6\xd8\x52\x01\xdf\xfd\xfe\xd3\xbb\xf8\xdb\x86\x1e\x6f\x89\x61\x01\x5e\x08\xa6\x82\x27\xd3\x5b\x68\x8d\xa4\x26\xaa\x2c\xb6\xf4\x60\xec\x7d\x11\x01\x0c\xa4\xf7\x7f\x0c\xe8\x8b\x0a\x2a\x63\x81\x6b\x1a\x29\x00\x67\xb2\x4e\x19\x5d\xc0\xeb\xb7\xff\xcf\x93\x3c\xc9\x5e\x3f\x83\x8f\x6a\x10\x46\xb3\x45\xa5\x39\xba\x10\xf2\x24\x83\xc5\x05\xa0\x74\x65\x6c\x8b\x3c\x3c\x83\xa3\x16\x35\x2b\x71\xd1\x0f\xda\xc8\xdb\x41\xa5\xc9\x16\xb0\x80\xcb\x8b\x83\xde\x91\x04\x36\xd0\x91\xf5\xc8\xc1\x3d\xe8\x2c\x49\x25\xbc\xcd\x08\x60\x01\x6d\xdf\xb0\xea\x1a\x82\xae\x41\xf6\x30\x07\x02\x35\x94\x04\xae\x23\xa1\x2a\x45\x32\x02\xc0\x56\xee\x36\x3e\x05\x00\xa7\xae\x2f\xc0\xa2\xea\xac\xf9\x44\x82\x53\x81\xb6\x6d\x62\x81\x55\x45\x45\x80\xc5\xa2\xeb\x03\x52\x7c\x15\x79\x0a\xc8\xae\x13\xbb\x4d\x43\xc5\x57\x49\x23\x70\xa4\xfd\xbd\x2b\xd7\x58\x49\x4e\x58\xd5\x71\x48\xf1\xdb\x08\xe0\xd7\x5a\xb9\x31\x1d\xca\x01\x82\xa5\xae\x51\x62\x48\xb4\xa9\xe6\xbb\x84\x81\x59\x92\xf4\xf9\xf7\xe2\xa9\x58\xba\xbe\x9c\x18\x49\x04\xf0\xbd\xaa\x2a\xb2\xa4\x05\xb9\x02\xb4\x61\x08\x17\xab\xf4\x09\x1e\x14\xd7\x81\x69\xa9\x51\xa7\x9a\xbd\x4c\x22\x63\x8c\xfd\xa9\x25\xcd\xc1\xc4\xff\x22\x00\xa5\x15\x2b\x6c\xd4\x67\x8f\xd0\x46\xc7\x9f\xc9\x1a\x28\x15\x3a\x72\xfe\x16\xb3\x24\x07\xa5\x1d\x13\x4a\xef\x63\x0e\x37\x95\xe9\xb5\x04\x4d\x82\x9c\x43\xfb\x34\x94\xe1\x78\xee\x12\xd0\xcd\x26\x87\xc8\xd8\x40\x0e\x27\x3c\x13\x54\x0d\x32\x34\xc6\xb9\x37\x49\xc8\x06\x41\xd9\x6b\xd9\x90\x9c\x93\xe2\x5d\x56\x4c\x76\xa0\xae\x77\xd9\x32\xcb\x32\x70\x1a\x3b\x57\x1b\x4e\x06\x12\x39\x86\x33\x36\x4a\xe2\x58\x4f\x63\xa9\xa1\x16\x04\xb2\xb7\x3e\x94\x39\x13\xde\xa3\xd9\xe2\xf6\x10\x2c\x86\xfc\xcc\x36\x00\x85\xe8\x2d\x8a\xa7\x08\x60\xbb\x4f\x56\xdb\xc3\x2b\x40\x2d\x83\xb3\x90\x27\x87\xf5\x71\x73\x48\xae\xef\xcf\x94\xbe\xdc\xfd\x25\xb2\xe9\xe2\xfc\xc2\xf7\xec\x7c\xe0\x62\x04\x41\xb9\x9d\x95\x87\x2c\x59\xbd\x02\x33\xdc\xe9\xd5\xe9\x8e\x78\x09\xbd\xf3\xee\x7e\xea\x1d\x07\xb5\x20\xcd\x64\x41\x58\xd3\xf9\x6c\xdd\xfc\x16\xd4\x5e\x83\x67\xb2\x78\x0a\x23\x23\xcf\x02\xc0\x2d\xe1\x66\x03\xff\x85\x7c\x64\xbd\x81\xff\xc0\x0a\x5a\x65\xad\xb1\x4b\x70\xb5\xe9\x1b\x39\xba\xec\xbb\x0a\x4a\xc5\x50\xab\x53\x4d\xf6\xe2\x5b\xf2\xe6\x79\x81\xfa\xb4\x85\x1c\x92\x84\xf2\x09\x7e\x38\xa3\x86\x5f\x6a\x6a\x6a\x6c\xc9\xc2\x37\x6e\x7a\x8c\x2c\xcd\x25\xb8\x80\xf9\x2d\x8c\x00\xec\xfc\x44\x48\xe1\x81\x4a\xa7\x98\xfc\x23\xb1\x48\x92\xa9\xc2\xa7\x90\xa6\x11\x16\x43\xcd\xdc\xb9\x22\x4d\x4f\x8a\xeb\xbe\x4c\x84\x69\x53\x3f\x2e\xd3\xd0\x5e\x29\x5b\xa2\xb4\x45\xc7\x64\xd3\xc0\x71\x69\x79\x6e\xc4\x1d\x36\xf4\xa8\x89\xff\x81\x85\x07\x75\xaf\xd2\xf7\x81\x1a\x4f\xb1\xc7\x46\xc7\x3f\xb6\x78\xa2\x5b\xe2\x78\x95\xe5\xab\xf8\x8c\xb3\x37\x45\x9a\x0e\x71\x24\x5a\x75\x2e\x11\x62\x78\x4d\x37\x87\xd5\x26\x56\x9e\xa6\x89\x63\xd1\xa0\x73\xaa\x1a\x9b\x33\xf6\xf5\x15\x4b\xa2\x2e\x16\x46\x9f\x4d\xd3\x7b\x29\x36\xb1\xa6\xde\x86\x3f\xf6\x33\xd9\x25\x9d\xac\xa2\x05\x34\x4a\x90\x76\xf4\x6c\x08\x44\xa3\xb0\x80\x5e\x5b\x72\x6c\x95\x60\x92\xd1\x02\x94\xee\x7a\x0e\xe9\x9d\xb1\x83\xac\x08\xa3\xb5\x52\xd6\xf1\x80\x02\x7e\xea\xe8\x8b\x3d\x11\x07\x71\x01\xc1\xf7\x30\xd1\x16\x70\x35\xab\x26\x2f\xae\xec\x04\xd0\xb3\x71\x16\xfa\x34\x1c\x31\x5b\xe9\xd0\xef\x1a\x26\x1b\x2a\x21\x1c\x3d\x8b\x02\x02\x40\xaa\x96\xb4\xdf\x22\xae\x80\x0f\xeb\x25\xac\x56\xfb\xf0\xf3\x71\xd4\xb7\x84\xba\x80\x0f\xf9\x6a\xbd\x84\x3c\xdf\x2f\x21\xcf\x36\x1f\x23\xd3\x73\xd7\xf3\x10\x9e\x3f\x39\xd8\x1e\xdd\x1c\x74\xbe\xd7\x42\x50\x15\x21\xf7\x96\x02\x14\x5f\x0a\x6b\xc0\xcf\x9e\x45\x2f\x44\x36\x62\x1a\x2c\x43\xc2\xae\x02\x1b\xd3\xf5\x52\x70\xe3\xc9\xee\xae\xb7\x4d\x31\x55\x8e\x5b\x27\xd8\xe2\x67\xa3\xf1\xc1\x85\x52\x74\x6c\x2c\x25\x61\x65\x24\xc6\x9e\x52\xf7\xa4\x1d\xb1\x4b\xa7\x42\x1a\x05\x09\x3f\xf2\x73\xab\xa2\x26\x71\xef\xfa\xb6\x80\x8d\x5c\xad\x37\xe5\xf6\xb0\x5e\xa3\xc0\xcd\xe6\xb8\x3a\x64\xbb\x2d\xe6\x87\x4c\x96\xeb\x2c\xdf\x61\x14\x2e\xda\xdf\xc1\xb4\x4b\xa7\xa6\x3e\x59\xec\xea\x30\x9c\x1e\xc8\x6f\x05\x07\x96\x9c\xe9\xad\x20\x1f\x42\x89\x8e\xfe\x9d\xf3\x63\x0b\xb6\xbe\xf7\xfe\xda\x88\xe1\xac\xbb\x0e\xb9\x2e\xe0\x5a\x15\xbb\xa7\xb6\x34\x4d\xf2\xc9\x85\xd1\x3d\x3a\xf2\x12\x30\xcb\xb2\x2c\x09\x49\xf6\xde\x29\x77\x87\x56\xd4\xea\x3c\x6e\xec\x0a\x1b\x47\xb0\x00\x55\x0d\xe3\x93\x6b\x1a\xe6\xea\x14\xc6\xb0\x63\xfd\x03\x1b\x40\x0d\x23\x7b\xba\xc1\x9a\xae\x5c\xbc\xce\xc9\x20\x08\xe6\x24\x69\xc3\xe4\x9f\x47\x56\xa5\x1a\x0a\xdf\x63\x6e\x2a\xa7\x2f\x53\xea\x5b\x7f\x5c\xdb\xf3\x91\xc3\x51\xf3\x1d\x66\x22\xab\x56\x12\x57\xfb\xd5\x81\xc4\x9e\x36\xb4\x95\xdb\x3d\xad\x33\x71\xdc\xae\xb7\x79\x99\x5f\x65\xe6\x8a\x74\x5c\x1f\x71\x85\xbb\xea\x48\x87\xfd\xe6\x28\xb2\x52\x1c\xd7\xbb\xdd\xfa\xb0\xdf\xc8\x43\x49\x32\x42\x66\xab\xca\x9e\x87\x59\x4c\x8f\x6c\x11\xc6\x51\x03\xb3\x2e\x02\xb8\x57\x5a\x16\xf0\xee\xf6\x76\xcc\x84\x7f\xf7\x11\x0d\xe3\xe9\xc2\xb9\x79\x77\x7b\xbb\x84\x9f\xfd\x4f\x92\x84\x0d\x31\xad\xd5\x3b\xff\x31\xe1\x88\x0b\x98\x06\xa7\x1f\x22\x83\xec\xf2\x05\x78\xfd\x65\x10\x01\xb4\xa8\x55\x45\x8e\xef\xb0\xe7\xda\xd8\x02\xb0\x94\x7d\x23\xa3\x3f\x03\x00\x00\xff\xff\x0c\x3d\x5d\x1e\x15\x0b\x00\x00"

func bvlcAlexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_bvlcAlexnetYml,
		"BVLC-AlexNet.yml",
	)
}

func bvlcAlexnetYml() (*asset, error) {
	bytes, err := bvlcAlexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "BVLC-AlexNet.yml", size: 2837, mode: os.FileMode(420), modTime: time.Unix(1554702571, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_512_vgg16_atrous_vocYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x5f\x6b\xdb\x48\x10\x7f\xd7\xa7\x18\xf0\x43\x5a\x48\x24\xcb\x71\x5d\x5b\x70\x85\xe2\x42\x5f\x7a\x09\x5c\xb9\x70\x6f\x62\xb4\x1a\x49\x7b\x95\x76\xc4\xee\xc8\x76\xf2\xe9\x8f\xdd\x95\x9d\x84\xe6\xae\xdc\x8b\xd8\xd5\xfc\xe6\xff\x6f\x66\x0d\x0e\x54\xc0\xf7\xef\x5f\xca\x0f\xf9\xaa\x7c\xf8\xfa\x35\xdf\x94\x9f\xc5\xf2\xe4\xca\x87\xfb\x3d\x2c\xc0\x03\x80\x1b\x78\xe4\xc9\xc2\xc0\x35\xf5\x49\xd2\x58\x1c\xe8\xc8\xf6\x47\x91\x00\x44\x0b\xbf\xff\x75\x47\x02\x0b\xb8\x88\xa0\x61\x0b\xd2\xd1\xac\x03\x70\x20\xeb\x34\x9b\x02\xae\x3e\xfd\x96\xa7\x79\xba\xbc\x7a\x05\x9f\xc5\xa0\xd8\x88\x45\x6d\x24\xb9\x28\xe4\xe9\x12\x16\x17\x80\x36\x0d\xdb\x01\x25\x9e\xc1\xd1\x80\x46\xb4\xba\xc8\xa3\x34\xf1\x76\x50\x1b\xb2\x05\x2c\xe0\x72\x71\x30\x39\xaa\x41\x18\x46\xb2\x1e\x19\xc3\x03\x3a\x60\x3f\x05\x9b\x09\x00\x0e\xf5\x66\xed\x53\x03\x68\xc7\xa9\x00\x8b\x7a\xb4\xfc\x37\x29\xc9\x14\xda\xa1\xbf\x51\xd8\x34\x54\x04\xd8\x8d\x1a\xa7\x80\x54\xbf\x44\xb6\x01\x39\x8e\x6a\xb3\xee\xa9\xf8\xa5\xd2\x0c\x9c\xd5\xfe\x3b\x94\x97\xd8\x9a\x9c\xb2\x7a\x94\x50\xba\x4f\x09\xcc\xad\xb9\xaf\xbc\x16\x7c\x21\x21\x15\x6a\x17\x12\xbf\x86\x63\xa7\x55\x07\xda\x41\xa8\x3a\xd5\xc0\x26\xb4\x6d\x7f\xbf\xbf\x87\x77\x7b\x1e\x06\x36\xb3\xb2\xf3\xf5\xde\xb3\x11\x3a\xc9\x7b\xa8\x51\xd0\x91\xa4\x09\xc0\x9f\x8e\xc0\xb9\x3a\x50\xe8\xd0\xb6\xf9\xa6\xc4\x48\xa1\x03\x2b\x68\x2c\x0f\xf0\xb5\x9f\xd8\xec\x1f\xe6\x6a\x3f\x31\xa7\x89\xa5\x86\x2c\x19\x45\xce\x77\xe8\xf9\x16\x9a\x83\xa3\xef\x55\x06\x47\xaa\x9c\x16\xf2\x47\x12\x95\xa6\x10\xb3\xab\xb4\x69\x5f\x91\xeb\x06\x3a\x91\xd1\x15\x59\xd6\x7a\x4f\x37\xea\x90\x0e\x27\x43\x92\x6a\xce\x02\xa6\x7c\x62\xce\xea\x73\xf2\x69\x27\x43\x9f\xf4\x5a\x91\x71\x54\xc0\xe7\x11\x55\x47\xf0\x2d\xde\xaf\xe1\x61\xa6\xd2\x2a\x10\x6f\x86\xf9\x21\x78\x76\xa9\xcd\x38\x49\x88\x3c\xa6\x14\xef\x21\x12\x79\x1c\xa9\x00\x3d\x60\x4b\x9e\xe1\xda\x3a\x89\x62\x0f\xc5\x5e\xcb\x63\xe8\xe7\xab\x3e\x79\xc3\x11\x73\xd6\x7b\x21\x3e\x7b\x7e\x61\x2a\x58\x18\xd1\x4f\x8f\x90\x75\x91\x4d\x00\xd4\xd3\x40\x46\xca\x18\x42\xd3\x33\xca\xed\x6a\x96\x05\xbd\xb2\xc7\x47\x3f\x12\x57\xc1\x4d\x29\x64\x1c\xdb\xab\x84\x27\x19\x27\xf1\x56\xa2\x66\xc5\x93\xa9\xb5\x69\x2b\x3e\x25\x6f\x44\x1a\xe1\x17\x14\x54\x7c\x82\x05\xe0\x5b\x31\xcf\xd0\x4b\xa8\xc9\xcf\x61\xff\x7b\xd0\x15\x9f\xc8\x5d\x42\xbe\x74\xaf\x0c\xff\xaf\x62\x0d\x2c\x57\x58\xe9\x5e\x8b\x7e\x13\xea\x14\xdb\x33\x56\xf5\xe8\xdc\x9b\xa8\x59\x12\x61\x0d\xa1\x4c\x96\x5c\x39\xd9\xbe\xb8\xf0\xca\xdd\xa6\x38\xe0\x13\x1b\x3c\xba\x54\xf1\x90\x39\x61\x4b\x69\x98\xc2\x94\x6d\x9b\xb9\x47\xe3\x48\x5c\xa6\x58\x71\xd6\x63\x45\xbd\x4b\xe5\x24\xaf\x4d\xaa\x8e\xd4\x0f\x37\x0d\x05\xac\xd7\xf9\x56\x6d\x3f\xd4\xcb\x9c\x36\x6a\xbb\x6a\x9a\xcd\x76\xbd\xab\xb6\xab\xdb\xdd\xc7\x0f\xbb\xf5\xed\x36\x09\xbc\xf2\x04\x73\x23\x29\xdd\x68\x72\x33\xd5\x5a\x8b\x63\x07\x68\x6a\x38\x92\x6e\x3b\x71\xe0\x78\xb2\x8a\x3c\xfb\x2a\x74\x14\xe2\x4e\x20\xe2\xca\x11\xa5\xfb\x1f\x59\x04\x17\x2e\x8b\xc4\x68\x7a\x3e\x9e\xff\xf8\xf9\x1e\xb8\xd2\x3d\x19\x92\xf2\x90\x97\x3e\xcf\x72\xb5\xcc\xb7\xe5\x32\x2f\x57\xdb\xac\xb1\xfc\x44\xa6\xd4\x66\x1e\xe4\x32\xf8\x4f\xc7\x2a\x01\xd0\xae\x44\xab\x3a\x7d\x98\xf7\x5e\x83\xbd\xf3\x24\xd7\x0d\x88\x9d\xe8\xda\x53\x25\xae\x9d\x73\x02\x7e\x23\x21\xf8\x83\x30\xa0\x81\x59\x3d\x68\x2f\x02\xf2\x39\xbd\x97\xb5\x88\x3f\x82\xb9\x9a\x0c\x0b\xf9\xf3\xac\xd5\xe8\x9e\xc2\x73\xe5\xce\xec\xfc\xb9\x94\x47\x2d\x9d\x8e\xa1\x3c\xbb\x8c\xae\x9e\x7b\xa7\x76\x75\xb3\x5b\x6e\xf1\xe3\xc7\xdd\x72\xb3\x52\xb4\x5c\x62\x45\xdb\x66\xb7\xa5\x35\xde\x52\x95\x27\x28\x62\x75\x35\x49\xdc\x6d\x74\x12\x8b\x73\xf3\x9e\x25\x09\xc0\x0f\x6d\xea\x02\xf6\x77\x77\x73\x4a\xfe\xee\x43\x33\x34\x59\xec\xc1\x90\x84\xa7\xf1\xdd\xfe\xee\xee\x1a\xfe\xf0\x9f\x34\x4d\xdf\xfb\x29\xf5\xbb\x5a\x9b\xb6\x9c\x97\x70\x11\xd7\xf5\xe2\xbc\x94\x2f\xaf\x5c\x78\x84\x67\x70\x02\x30\xa0\xd1\x0d\x39\x29\x71\x92\x8e\x6d\x01\xfb\x8e\x4c\x0b\xdf\x74\xf2\x4f\x00\x00\x00\xff\xff\x7e\x15\x48\x8b\x08\x08\x00\x00"

func ssd_512_vgg16_atrous_vocYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_512_vgg16_atrous_vocYml,
		"SSD_512_VGG16_Atrous_VOC.yml",
	)
}

func ssd_512_vgg16_atrous_vocYml() (*asset, error) {
	bytes, err := ssd_512_vgg16_atrous_vocYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_512_VGG16_Atrous_VOC.yml", size: 2056, mode: os.FileMode(420), modTime: time.Unix(1554702007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v1_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\xe0\x43\x5a\x20\xd6\x87\x25\xdb\x92\x80\x2d\xb0\x70\x81\xbd\xb4\x0e\xb0\xc5\x16\x7b\x13\x28\x6a\x64\xb1\x91\x48\x81\x1c\xc5\x76\x7e\xfd\x82\xa4\x6c\x27\x48\xba\xdd\xcb\xe6\x10\x90\x9a\x37\x33\x6f\x66\x1e\x49\x4b\x36\x60\x09\xdf\xbe\x7d\xae\xbe\xaa\x5a\xf4\xb8\x47\xaa\x9e\x92\x6a\xf7\xb0\x7b\x80\x05\x58\x2b\xa8\x16\xce\x6a\xd2\x30\xa8\x06\xfb\xa0\xd5\x6c\xc0\xa3\xd2\x8f\x65\x00\xe0\xbd\xbf\xfe\xbd\x47\x82\x05\x5c\x4d\xd0\x2a\x0d\xd4\xe1\xec\x02\xf0\x84\xda\x08\x25\x4b\xb8\xfb\xf4\x5b\x12\x26\x61\x7c\xf7\x0a\x3e\x9b\x81\x2b\x49\x9a\x09\x49\xc1\xd5\x21\x09\x63\x58\x5c\x01\x42\xb6\x4a\x0f\x8c\xfc\x1a\x0c\x0e\x4c\x92\xe0\x57\xbb\xb7\x06\x36\x0e\x13\x12\x75\x09\x0b\xb8\x6e\x0c\x4c\x06\x1b\x20\x05\x23\x6a\x8b\xf4\xf4\x00\x9f\x58\x3f\xb9\x98\x01\x00\x1b\x9a\x4d\x66\x4b\x03\x38\x8c\x53\x09\x9a\x89\x51\xab\x1f\xc8\x29\xe2\x4c\x0f\xfd\x92\xb3\xb6\xc5\xd2\xc1\x96\x7c\x9c\x1c\x92\xff\x12\x79\x70\xc8\x71\xe4\x9b\xac\xc7\xf2\x97\x4e\x33\x70\x76\xfb\x77\x2a\x2f\xb1\x0d\x1a\xae\xc5\x48\xae\x75\x9f\x02\x98\x47\xf3\x50\x5b\x2f\xf8\x8c\x84\xdc\xf5\xce\x15\x7e\x0f\xc7\x4e\xf0\x0e\x84\x01\xd7\x75\x6c\x40\x49\x37\x36\x37\xfd\x0f\x3b\x35\x0c\x4a\xce\xce\xc6\xf6\x7b\xa7\x24\xe1\x89\x3e\x42\xc3\x88\x19\xa4\x30\x00\xf8\xcb\x20\x18\xd3\x54\xeb\x64\x55\x0d\x4e\x42\x12\x29\x09\xe3\x8a\x2b\xae\xa0\xd5\x6a\x80\x3f\xfa\x49\xc9\xdd\xf7\xb9\xdd\xcf\x4a\x85\x81\xc6\x16\x35\x4a\x8e\xc6\x8e\xe8\xb6\x73\xd3\x61\xa3\x1d\x56\x04\x47\xac\x8d\x20\xb4\x4b\x24\x1e\x86\xe0\xcb\xab\x85\x3c\xbc\x52\xd7\x12\x3a\xa2\xd1\x94\x51\x74\xb0\x99\x96\xfc\x29\x1c\x4e\x12\x29\x14\x2a\x72\x98\xea\x59\xa9\xa8\xb9\x54\x1f\x76\x34\xf4\x41\x2f\x38\x4a\x83\x25\xfc\x3e\x32\xde\x21\x7c\xf1\xfb\x7b\xf8\x3e\x6b\x69\xe5\x94\x37\xc3\xec\x21\xb8\xa5\x14\x72\x9c\xc8\x31\xf7\x25\xf9\xbd\x63\x42\xe7\x11\x4b\x10\x03\x3b\xa0\x95\xb8\xd0\x86\xbc\xd9\x42\x59\x2f\xe8\xec\x06\xfa\x6a\x50\x36\xb0\xc7\x5c\xfc\x5e\x98\x2f\x99\x5f\x84\x72\x11\x46\x66\x8f\x0f\xa1\x36\x5e\x4e\x00\xd8\xe3\x80\x92\x2a\x4f\xa1\xed\x15\xa3\x74\x35\xdb\x9c\x5f\xd5\xb3\xb3\x3d\x13\x77\x2e\x4d\x45\x28\x8d\xd2\x77\x81\x9a\x68\x9c\xc8\x46\xf1\x9e\xb5\x9a\x64\x23\xe4\xa1\x56\xa7\xe0\x1d\xa6\x1e\x7e\x45\x41\xad\x4e\xb0\x00\xf6\x1e\xe7\x19\x7a\xa5\x1a\xbc\xa5\xfd\x73\xd2\xb5\x3a\xa1\xb9\x50\x8e\x7d\xcd\x5a\xd5\xac\x16\xbd\x20\x71\x33\x25\xfe\x34\xf5\xcc\x98\xdb\x47\x1f\xa2\x45\x46\x93\x46\x53\x4d\xba\x2f\xaf\x22\x31\x69\xc8\x06\xf6\xac\x24\x3b\x9a\x90\xab\x21\x32\xa4\x34\x86\xee\x4c\x85\x4a\x1f\x22\x73\x96\x06\xc9\x44\x56\xc1\x51\xcf\x6a\xec\x4d\x48\x27\x7a\x1d\x92\x77\xc8\x1f\xcd\x34\x94\x90\x65\x49\xce\xf3\x75\x13\x27\xb8\xe1\xf9\xaa\x6d\x37\x79\x56\xd4\xf9\x2a\x2d\xb6\xeb\x22\x4b\xf3\xc0\x89\xc4\xaa\xc5\x8c\xc8\x45\x2b\xd0\xcc\xba\x39\x68\x36\x76\xc0\x64\x03\x47\x14\x87\x8e\x0c\x18\x35\x69\x8e\x56\x4a\x35\x33\xe8\x78\x07\xe0\x71\xd5\xc8\xa8\xf3\x55\xfc\x97\x22\x5c\x06\x13\xb9\x83\x10\x69\x34\x12\x4f\x94\xc4\xc9\x32\x5d\x9d\xb2\xe6\xcd\x87\xa5\x39\x0f\xb5\xea\xc3\x1f\xc6\xdd\x82\x33\x9d\xff\x37\x65\x1c\xc7\x71\xe8\xf4\x60\xeb\x15\xa6\x62\x9a\x77\xe2\xc9\xca\x80\xf5\xc6\x1e\x03\xd1\x82\x41\xba\xb7\x5a\xf2\x17\xd3\xa5\x29\xf6\xce\x62\x60\x17\xa4\x80\x49\x98\x3d\x67\xb1\xbf\xfe\x5b\x38\xcf\x5b\x0b\x5f\xf6\xdb\x7f\x70\xe1\x1b\x94\x8a\xd0\xae\x7f\x12\xa5\x15\x3d\xba\x07\xcf\x5c\xe4\xfd\x76\x7c\x47\x41\x9d\xf0\x54\x6f\x94\x7c\xea\x9b\x5e\xda\x14\xd7\x3c\xad\x73\xd6\xd4\x39\x67\x98\xa4\x45\xb2\x29\x32\x96\x6f\xd3\x7a\xdb\x66\xb8\x7a\xd1\xff\x9b\xd3\x2a\xc9\x36\x1c\xf3\x62\x9d\x66\xc5\x0a\xd3\x75\x93\x6f\x8a\x64\x13\xd7\x75\x53\x6c\x57\x9b\x3a\x7b\x27\x0f\x2f\x9a\xb6\x88\x73\xb6\xdd\x16\xf1\x66\xc5\x31\x8e\x59\x8d\x79\x5b\xe4\x98\xb1\x14\xeb\x24\x60\x44\x5a\xd4\x13\xf9\x4b\x18\x4f\xa4\xd9\x2c\xcc\x9b\x25\x00\x78\x14\xb2\x29\x61\xb7\xdf\xcf\xad\xb4\x7b\xdb\x02\x89\x93\x66\x3d\x48\x24\xf7\x88\x7f\xd8\xed\xf7\xf7\xf0\xa7\xfd\x17\x86\xe1\x47\x7b\x9d\xd8\x57\x45\xc8\x43\x35\x3f\x17\x25\xcc\x3f\x2b\xe6\xfd\xf5\x3d\x76\x3f\x17\x66\x70\x00\x30\x30\x29\x5a\x34\x54\xb1\x89\x3a\xa5\x4b\xd8\x75\x28\x0f\xf0\x45\x04\xff\x04\x00\x00\xff\xff\x51\x90\x2d\x1e\xae\x08\x00\x00"

func ssd_mobilenet_v1_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v1_cocoYml,
		"SSD_MobileNet_v1_COCO.yml",
	)
}

func ssd_mobilenet_v1_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v1_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v1_COCO.yml", size: 2222, mode: os.FileMode(420), modTime: time.Unix(1554702011, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"BVLC-AlexNet.yml": bvlcAlexnetYml,
	"SSD_512_VGG16_Atrous_VOC.yml": ssd_512_vgg16_atrous_vocYml,
	"SSD_MobileNet_v1_COCO.yml": ssd_mobilenet_v1_cocoYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"BVLC-AlexNet.yml": &bintree{bvlcAlexnetYml, map[string]*bintree{}},
	"SSD_512_VGG16_Atrous_VOC.yml": &bintree{ssd_512_vgg16_atrous_vocYml, map[string]*bintree{}},
	"SSD_MobileNet_v1_COCO.yml": &bintree{ssd_mobilenet_v1_cocoYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

