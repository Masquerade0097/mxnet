// Code generated by go-bindata.
// sources:
// builtin_models/AlexNet.yml
// builtin_models/ResNet18_v1.yml
// builtin_models/SSD_512_VGG16_Atrous_VOC.yml
// builtin_models/SSD_MobileNet_v1_COCO.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x8b\xe4\x36\x10\xbe\xfb\x57\x14\xf4\x61\x12\x98\xf1\xa3\xdd\xd3\xdb\x63\xc8\x42\xd2\x87\x4d\x20\x99\xc3\x42\x1e\xb0\x2c\x4d\x59\x2e\xb7\xb5\x2b\x4b\x46\x2a\x4f\x4f\xef\xaf\x0f\x7a\xf4\x8b\x2c\xbb\xe4\x62\x2c\xd5\x57\x55\x5f\x7d\x55\x92\x34\x8e\xd4\xc0\xcf\x8a\x5e\x9f\x89\x61\x01\x7e\x0d\xa6\x87\xa3\x99\x2d\x8c\xa6\x23\x95\xf5\x16\x47\x3a\x18\xfb\xb9\xc9\x00\x22\xfe\x8f\x7f\x22\xfa\x6c\x82\xde\x58\xe0\x81\x92\x0b\xc0\x0b\x59\x27\x8d\x6e\xe0\xee\xed\x4f\x55\x5e\xe5\xe5\xdd\x0d\x3c\x99\x41\x18\xcd\x16\xa5\xe6\xec\xec\x50\xe5\x25\x2c\xce\x00\xa9\x7b\x63\x47\xe4\xf8\x0f\x8e\x46\xd4\x2c\xc5\xd9\x1e\xad\x99\x8f\x83\x52\x93\x6d\x60\x01\xe7\x85\x83\xd9\x51\x07\x6c\x60\x22\xeb\x91\x91\x1e\xd0\x0b\xaa\x39\xc4\xcc\x00\x70\xec\xd6\x2b\x5f\x1a\xc0\x7e\x9a\x1b\xb0\x28\x27\x6b\x3e\x91\xe0\x42\xa0\x1d\xd5\x83\xc0\xbe\xa7\x26\xc0\x1e\xc4\x34\x07\xa4\xf8\x2e\x72\x1f\x90\xd3\x24\xd6\x2b\x45\xcd\x77\x9d\x12\x30\xb9\x7d\x9b\xca\x35\xb6\x23\x27\xac\x9c\x38\x48\xf7\x36\x83\xd4\x9a\xdf\x46\xdc\x13\x6c\x15\x3a\x27\x7b\x29\xa2\x7e\xa1\xf8\x7b\x38\x0c\x52\x0c\x20\x1d\x04\xe5\xa9\x03\xa3\x43\xeb\x82\x8f\x77\xee\x90\xd1\x11\xe7\x19\xc0\x9f\x8e\xce\xc3\xd1\x5b\x33\xc2\x3b\x35\x1b\xbd\xfd\x2b\x09\xf9\xc5\x98\x3c\xb3\xd4\x93\x25\x2d\xc8\x79\xf1\x2f\xab\xa0\x3b\x4e\xbe\x0d\x05\x1c\xa8\x75\x92\xc9\xff\x12\x8b\x3c\x87\x48\xbc\x95\x7a\x7f\x33\x37\x0f\x30\x30\x4f\xae\x29\x8a\xbd\xcf\xf4\x20\x5e\xf2\xf1\x55\x13\xe7\xd2\x14\x01\xb3\xfb\x62\x4c\x21\x6e\x0a\xcb\x07\x1e\x55\xa6\xa4\x20\xed\xa8\x81\x59\x5b\x72\x6c\xa5\x60\xea\x60\x01\x69\xdf\x0f\xf5\x25\x91\xd4\xd3\xcc\x81\x6f\x2c\x24\xae\x43\x7e\x3e\x4e\xd4\x80\x0c\x02\x2e\xa0\x97\xd6\x71\x34\x7b\x28\x2a\xc9\xc7\xd0\xa0\x1b\xe1\x7d\xe0\x88\x39\xf9\x5d\x99\x4f\x99\xaf\x42\x85\x08\x13\xfa\xe3\xc0\x64\x5d\x1c\x0f\x00\x52\x34\x92\xe6\x5d\xa4\xd0\x2b\x83\x5c\x2f\x93\x2d\xf8\xed\x14\x1e\xfd\x8c\x97\x69\x53\xe1\xd1\xcc\xdc\xc0\xdd\xf6\xd7\xbf\xef\xd2\x9e\x30\xca\xd8\x9d\x2f\xab\x81\xbb\xf7\xef\x7e\x39\xed\x77\x72\x24\xed\xcf\x8c\x6b\xe0\x43\x7d\x0f\xcb\xe5\x2a\x7c\x3e\x26\xfb\x48\xa8\x1b\xf8\x50\x2d\xeb\x7b\xa8\xaa\x37\xf7\x50\x95\xab\x8f\x99\x99\x79\x9a\xd9\x13\x5c\x84\x22\x3c\xb5\x53\x41\xd1\x96\x41\x92\xec\xb6\x29\xc1\x03\xbf\xa6\x43\x74\xbb\x94\x9f\x7d\x45\xcc\x84\x51\xd8\x86\xa9\xb8\x92\xca\xf3\xf0\x1c\x2e\x5b\xd9\xb7\xa5\x9b\xac\x69\xb1\x95\x4a\xb2\x24\x77\x16\x10\x16\x20\x75\x47\xaf\x27\x52\x37\x28\x08\x28\x7f\xdf\x5c\xb8\xc4\x34\x3d\x21\xcf\x96\xdc\x6e\xb6\xaa\x09\xa3\xda\x14\x85\xab\x73\x1c\xf1\x8b\xd1\x78\x70\xb9\x30\x63\xe1\xd8\x58\xca\xc3\x91\xcd\x8d\xdd\x17\xee\xa8\x1d\xb1\x2b\xc2\x70\x68\xe2\xb4\x91\xf3\x2b\xdf\x46\x15\x03\x89\xcf\x6e\x1e\x1b\x58\x75\xcb\x7a\xd5\x3e\x6e\xea\x1a\x05\xae\x56\x4f\xcb\x4d\xb9\x7e\xc4\x6a\x53\x76\x6d\x5d\x56\x6b\xcc\xc2\xdc\x7a\x35\xdc\x44\x42\xf6\x9e\x75\x1c\xe5\xbd\xc5\x69\x00\xd4\x1d\x1c\x48\xee\x07\x76\xe0\xcc\x6c\x05\xf9\x02\x5a\x74\xf4\xff\xa8\x87\x98\xae\x08\x67\x30\x1e\x49\xf1\x52\xa0\x22\xbf\xce\x20\x26\xdb\x4d\xc8\x43\x13\xd3\x3f\xb8\xe3\xd8\x1a\x95\x7f\x72\x61\x04\x12\x85\x1b\x44\x59\x96\x65\x1e\xda\xe7\x29\x49\xb7\x43\x2b\x06\xf9\x92\x2e\xc9\x1e\x95\xf3\x07\x48\xf6\xe0\x88\xef\x7d\x07\x62\x1b\x4e\xdc\xfd\xcd\x85\xe0\x7f\xd8\x00\x6a\x48\xde\xc1\x39\xce\xe8\x85\xd4\xb5\x0c\x71\x23\x84\xeb\x48\x1b\x26\xff\x9f\xbc\x7a\xa9\x28\x3c\x6d\xee\x34\x0f\xff\x55\xf1\x20\x79\x48\x13\x71\x49\x19\x53\x5d\xb5\x0d\xdb\xee\xf1\x0d\x89\xcd\x66\x5d\xf7\x7d\x4d\x35\x2d\x9f\x48\x74\x2b\xc2\x6e\x55\x77\x55\x7f\x25\xc9\xc5\xe9\xa9\x5c\xfb\x66\x2f\x71\xdd\x56\xab\x96\x3a\x14\xcb\x4e\x08\xd1\xe2\xa6\x7a\xb3\x79\x5c\x3e\x65\xc8\x6c\x65\x3b\x73\xbc\x61\xe9\x95\x2d\xa6\x66\x5f\x2c\x19\xc0\x67\xa9\xbb\x06\xb6\xcf\xcf\x49\x07\xbf\xf6\xf5\x68\x9a\x2d\x2a\xd0\xc4\xe1\xed\xfd\x61\xfb\xfc\x7c\x0f\xef\xfd\x27\xcf\xf3\x1f\xfd\xf9\xf5\x0f\x81\xd4\xfb\x5d\xba\xf9\x9b\xcb\x5b\xb0\x38\xbd\x06\xe7\xa7\x34\xbc\xf4\xc9\x21\x03\x18\x51\xcb\x9e\x1c\xef\x70\xe6\xc1\xd8\x06\xb6\x03\xe9\x3d\xfc\x2e\xb3\x7f\x03\x00\x00\xff\xff\x91\x57\x37\x97\x5b\x08\x00\x00"

func alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_alexnetYml,
		"AlexNet.yml",
	)
}

func alexnetYml() (*asset, error) {
	bytes, err := alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "AlexNet.yml", size: 2139, mode: os.FileMode(420), modTime: time.Unix(1554878842, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet18_v1Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\xe0\x83\x5b\x20\x2b\xc9\x6b\xaf\x23\x0b\x68\x0e\xf5\x21\x2d\xd0\xfa\x10\xa0\x8f\x9b\x31\xa2\x86\x16\x13\x8a\x14\xc8\x91\xbd\xde\x5f\x5f\x90\x94\x5f\x48\xda\xf4\x22\x48\x9c\xef\x9b\xe7\xa7\xa1\xc1\x9e\x6a\xf8\x44\x7e\x47\xbc\xa8\xf6\xc7\x05\xcc\x20\x9c\x81\x95\x70\xb6\xa3\x83\xde\xb6\xa4\x33\xe9\xb0\xa7\x93\x75\x5f\xea\x0c\x20\x71\x7e\xff\x7b\x47\x0c\x33\xb8\x9a\x40\x5a\x07\xdc\xd1\x44\x01\x38\x92\xf3\xca\x9a\x1a\xe6\x1f\x7e\x5a\xe4\x8b\xbc\x9c\x3f\xc0\x27\x33\x08\x6b\xd8\xa1\x32\x9c\x5d\x09\x8b\xbc\x84\xd9\x15\xa0\x8c\xb4\xae\x47\x4e\xef\xe0\xa9\x47\xc3\x4a\x5c\xed\xc9\x9a\x05\x3f\xa8\x0c\xb9\x1a\x66\x70\xfd\xf0\x30\x7a\x6a\x81\x2d\x0c\xe4\x02\x32\xa5\x07\x74\x44\x3d\x46\x9f\x19\x00\xf6\xed\x7a\x15\x4a\x03\x38\x0c\x63\x0d\x0e\xd5\xe0\xec\x67\x12\x5c\x08\x74\xbd\x7e\x12\x28\x25\xd5\x11\xf6\x24\x86\x31\x22\xc5\x77\x91\x87\x88\x1c\x06\xb1\x5e\x69\xaa\xbf\x4b\x9a\x80\x13\xed\xbf\x53\xb9\xc7\xb6\xe4\x85\x53\x03\xc7\xd6\x7d\xc8\x60\x1a\xcd\xaf\x3d\x1e\x08\xb6\x1a\xbd\x57\x52\x89\xd4\xbf\x58\xfc\x3b\x38\x75\x4a\x74\xa0\x3c\xc4\xce\x53\x0b\xd6\xc4\xd1\x45\x4e\x20\xb7\xc8\xe8\x89\xf3\x0c\xe0\x0f\x4f\xe0\xc8\x9b\x8b\x40\xa4\xb3\x3d\x7c\xd4\xa3\x35\xdb\x3f\xa7\x66\xbe\x59\x9b\x67\x8e\x24\x39\x32\x82\x7c\x18\xc0\xed\x2b\xf6\x1e\x87\x30\x8a\x02\x4e\xd4\x78\xc5\x14\x5e\x89\x45\x9e\x43\x4a\xbe\x51\xe6\xf0\xa0\x9d\x27\xe8\x98\x07\x5f\x17\xc5\x21\x44\x7a\x12\xc7\xbc\x7f\x35\xc4\xb9\xb2\x45\xc4\xec\xdf\xac\x2d\xc4\x43\x71\x79\xc7\xbd\xce\xb4\x12\x64\x3c\xd5\x30\x1a\x47\x9e\x9d\x12\x4c\x2d\xcc\x60\x3a\x0f\xc2\xbe\x05\x52\x66\x18\x39\xe6\x9b\x0a\x49\xdf\x31\x3e\x9f\x07\xaa\x41\xc5\x26\xce\x40\x2a\xe7\x39\x99\x03\x14\xb5\xe2\x73\x1c\xd2\x43\xf3\x83\xe3\x84\xb9\xf0\xee\xcc\x97\xc8\x77\xae\xa2\x87\x01\xc3\x2f\xc1\xe4\x7c\x92\x08\x00\x69\xea\xc9\xf0\x3e\xa5\x20\xb5\x45\x5e\x3e\x4f\xb6\xc8\xdb\x6b\x3c\x07\x9d\x97\xd3\xa1\xc6\xb3\x1d\xb9\x86\xf9\xf6\x97\xbf\xe6\xd3\x99\xb0\xda\xba\x7d\x28\xab\x86\xf9\xa7\x8f\x3f\xcf\x33\x3b\xf2\x30\x72\x08\x92\x1c\x37\x76\x34\xad\x32\x87\xc6\xbe\x66\xdf\x28\x24\xc1\xaf\x28\x68\xec\x2b\xcc\x00\xbf\x55\xd2\x04\xbd\x56\x92\x7d\x5d\xd5\xbf\xd7\x34\x38\xdb\x60\xa3\xb4\x62\x45\xfe\xb1\x32\x49\xc8\xa3\x23\xbf\x1f\x9d\xae\xaf\x8a\xf0\xcb\x1c\x7b\x7c\xb3\x06\x4f\x3e\x17\xb6\x2f\x3c\x5b\x47\x79\xfc\x3d\x72\xeb\x0e\x85\x3f\x1b\x4f\xec\x0b\x61\x85\x2d\x34\x36\xa4\x7d\xce\xaf\xfc\xe8\x52\x74\x24\xbe\xf8\xb1\xaf\x61\xb5\x5a\x54\xa2\x7a\x69\xcb\x05\xad\x45\xf5\x2c\xe5\xba\x5a\x6d\x9a\xea\x79\xb9\x79\xff\xb2\x59\x2d\xab\x2c\x6a\x23\x88\xc4\x0f\x24\x94\x54\xe4\x27\xb9\x1c\x1c\x0e\x1d\xa0\x69\xe1\x44\xea\xd0\xb1\x07\x6f\x47\x27\x28\x28\xa8\x41\x4f\xb7\xbc\xff\x4f\xda\xd1\xa7\x2f\xa2\xce\x93\xec\xc5\xb1\xb8\xfb\xf3\x32\x48\x01\xf7\x03\x72\x57\xa7\x14\x9e\xfc\xb9\x6f\xac\xce\x3f\xfb\xb8\xc8\xa6\x34\x1e\x10\x65\x59\x96\x79\x1c\x47\x48\x4b\xf9\x3d\x3a\xd1\xa9\xe3\xb4\x90\x24\x6a\x1f\x84\xaa\x24\x78\xe2\x77\x61\x9c\x69\x15\x5c\xf2\x0f\x5b\x02\x21\xbc\xb0\x05\x34\x30\xb1\x23\x79\x16\x91\xb7\xa4\xee\x5b\x91\x0e\xa2\xbb\x96\x8c\x65\x0a\xef\x13\x4b\x2a\x4d\xf1\x1a\xf1\x17\x05\x7d\xdd\xc9\x93\xe2\x4e\xa5\x54\x6e\x21\x53\xa8\xdb\xe8\x9a\x45\xd9\x6c\x16\xab\xaa\x2d\xd7\xcd\xa2\x5a\x61\x25\x70\x85\x72\xd9\x94\x6b\x49\xab\x72\x49\x77\x2d\xb9\x91\x24\x6e\x68\xfd\x52\x51\x55\xb5\xab\xe7\x97\x4d\xb3\x2c\xdf\xe3\x4b\xd9\x2c\xd7\x58\x56\x65\xd3\x8a\x0c\x99\x9d\x6a\x46\x4e\x9b\x8c\x5e\xd9\xe1\x34\xf0\x9b\x25\x03\xf8\xa2\x4c\x5b\xc3\x76\xb7\x9b\xfa\x10\xbe\x43\x3d\x86\x46\x87\x1a\x0c\x71\xbc\xe7\x7e\xd8\xee\x76\xef\xe0\x53\x78\xe4\x79\xfe\x63\xf8\xfd\xc2\xd2\x55\xe6\xb0\x9f\xb6\x6c\x7d\xdb\xbb\xb3\xcb\xe6\xbd\x5e\x5b\xf1\x56\x9d\x08\x19\x40\x8f\x46\x49\xf2\xbc\xc7\x91\x3b\xeb\x6a\xd8\x76\x64\x0e\xf0\x9b\xca\xfe\x09\x00\x00\xff\xff\xef\x41\x60\x2c\xcb\x07\x00\x00"

func resnet18_v1YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet18_v1Yml,
		"ResNet18_v1.yml",
	)
}

func resnet18_v1Yml() (*asset, error) {
	bytes, err := resnet18_v1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ResNet18_v1.yml", size: 1995, mode: os.FileMode(420), modTime: time.Unix(1554878876, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_512_vgg16_atrous_vocYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\xe0\x83\x13\x20\x2b\x59\x5e\xc7\x6b\x0b\x68\x80\xd6\x01\xb6\x87\x76\x17\x48\xd0\x6d\x6f\x02\x45\x8d\x24\x76\x29\x8e\x40\x8e\xfc\xd8\x5f\x5f\x90\x94\xed\x5d\x24\x6d\xd0\x8b\x20\x72\xbe\x79\x7c\xf3\xa2\x11\x3d\x16\xf0\xf5\xeb\xe7\xf2\x63\xbe\x2c\x9f\xee\xef\xf3\x75\xf9\x33\x5b\x1a\x5d\xf9\xf4\xb8\x83\x19\x78\x00\x50\x03\x27\x1a\x2d\xf4\x54\xa3\x4e\x92\xc6\x8a\x1e\x0f\x64\x9f\x8b\x04\x20\x5a\xf8\xfd\xaf\x07\x64\x98\xc1\x45\x04\x0d\x59\xe0\x0e\x27\x1d\x80\x3d\x5a\xa7\xc8\x14\x30\xff\xf4\x53\x9e\xe6\xe9\x62\xfe\x06\x3e\x89\x41\x92\x61\x2b\x94\xe1\xe4\xa2\x90\xa7\x0b\x98\x5d\x00\xca\x34\x64\x7b\xc1\xf1\x1f\x1c\xf6\xc2\xb0\x92\x17\x79\x94\x26\xde\x8e\x50\x06\x6d\x01\x33\xb8\x1c\x1c\x8c\x0e\x6b\x60\x82\x01\xad\x47\xc6\xf0\x00\xf7\x42\x8f\xc1\x66\x02\x20\xfa\x7a\xbd\xf2\xd4\x00\xda\x61\x2c\xc0\x0a\x35\x58\xfa\x1b\x25\x67\x52\xd8\x5e\xdf\x48\xd1\x34\x58\x04\xd8\x8d\x1c\xc6\x80\x94\x3f\x44\xb6\x01\x39\x0c\x72\xbd\xd2\x58\xfc\x50\x69\x02\x4e\x6a\xff\x1d\xca\x6b\x6c\x8d\x4e\x5a\x35\x70\x48\xdd\xa7\x04\xa6\xd2\x3c\x56\x5e\x0b\x3e\x23\xa3\x0c\xb9\x0b\xc4\x3f\xc0\xa1\x53\xb2\x03\xe5\x20\x64\x1d\x6b\x20\x13\xca\xb6\x7b\xdc\x3d\xc2\xbb\x1d\xf5\x3d\x99\x49\xd9\xf9\x7c\xef\xc8\x30\x1e\xf9\x3d\xd4\x82\x85\x43\x4e\x13\x80\x3f\x1c\x82\x73\x75\x68\xa1\x7d\xdb\xe6\xeb\x52\xc4\x16\xda\x93\x84\xc6\x52\x0f\xf7\x7a\x24\xb3\x7b\x9a\xb2\xfd\x42\x94\x26\x16\x1b\xb4\x68\x24\x3a\x5f\xa1\xeb\x29\x14\x47\x0c\xbe\x56\x19\x1c\xb0\x72\x8a\xd1\xff\x22\xcb\x34\x85\xc8\xae\x52\xa6\x7d\xd3\x5c\x37\xd0\x31\x0f\xae\xc8\xb2\xd6\x7b\xba\x91\xfb\xb4\x3f\x1a\xe4\x54\x51\x16\x30\xe5\x0b\x51\x56\x9f\xc9\xa7\x1d\xf7\x3a\xd1\x4a\xa2\x71\x58\xc0\x68\x2c\x3a\xb6\x4a\x32\xd6\x30\x83\xe9\xde\x77\xfd\xd5\x87\x32\xc3\xc8\x21\xd4\xc8\x21\x9e\x83\x6b\x3e\x0d\x58\x80\xea\x45\x8b\xbe\xa5\x95\x75\x1c\xc5\x1e\x2a\xb4\xe2\x53\x28\xe0\x9b\xc2\x78\xc3\x11\x73\xd6\x7b\x25\x3e\x7b\x7e\x65\x2a\x58\x18\x84\x1f\x17\x46\xeb\x62\xfb\x00\xa0\xc6\x1e\x0d\x97\x31\x84\x46\x93\xe0\xdb\xe5\x24\x0b\x7a\xa5\x16\x27\x3f\x03\x73\x5f\xae\xf9\x24\xd1\xe2\x44\x23\x17\x30\xdf\xfd\xfa\xe7\xf9\x4e\x92\x26\x5b\x7a\x6e\x05\xcc\xbf\xdc\xff\x32\x4f\x68\xe4\x61\x64\xef\x29\x5a\xaf\x68\x34\xb5\x32\x6d\x45\xc7\xe4\x3b\x6c\x22\xfc\x82\x82\x8a\x8e\x30\x03\xf1\x3d\x5e\x13\xf4\x42\x27\xf9\x96\xda\xbf\x13\xab\xe8\x88\xee\x4c\x6b\x11\xf3\x62\xa9\x12\x95\xd2\x8a\xd5\x55\x94\xc7\x09\xd3\xc2\xb9\xeb\x65\x34\xd1\xa0\xe0\xd1\xa2\x2b\x47\xab\x8b\x4b\xe7\xb8\xdb\x54\xf4\xe2\x85\x8c\x38\xb8\x54\x52\x9f\x39\x26\x8b\x69\x98\xb3\x94\x6c\x9b\xb9\x93\x71\xc8\x2e\x93\x24\x29\xd3\xa2\x42\xed\x52\x3e\xf2\x5b\x93\xb2\x43\xf9\xec\xc6\xbe\x80\xd5\x2a\xdf\xc8\xcd\xc7\x7a\x91\xe3\x5a\x6e\x96\x4d\xb3\xde\xac\xb6\xd5\x66\x79\xbb\xbd\xfb\xb8\x5d\xdd\x6e\x92\xd0\x48\xbe\xa3\xdc\x80\x52\x35\x0a\xdd\xd4\x5b\xad\x15\x43\x07\xc2\xd4\x70\x40\xd5\x76\xec\xc0\xd1\x68\x25\xfa\x76\xab\x84\xc3\x10\x77\x02\x11\x57\x0e\x82\xbb\xff\xc1\x22\xb8\x70\x19\xa3\x71\x64\x1b\x4d\x87\xf3\x8d\x9f\xe0\x9e\x2a\xa5\xd1\x20\x97\xfb\xbc\xf4\x3c\xcb\xe5\x22\xdf\x94\x8b\xbc\x5c\x6e\xb2\xc6\xd2\x0b\x9a\x52\x99\x69\x54\xcb\xe0\x3f\x1d\xaa\x04\x40\xb9\x52\x58\xd9\xa9\xfd\xb4\xd9\x1a\xa1\x9d\xef\x6a\xd5\x00\xdb\x11\x3f\xf8\xba\xc7\xc5\x72\x26\xe0\x77\x8e\x00\xff\xc3\x04\xc2\xc0\xa4\x1e\xb4\x67\x01\x79\xa5\xf7\x3a\x17\xf1\x22\x98\xab\xd1\x10\xa3\xff\x9f\xb4\x1a\xa5\x31\x3c\x48\xee\xdc\x6a\xdf\xa6\xf2\xa0\xb8\x53\x31\x94\xab\xcb\xe8\xea\x5a\x3b\xb9\xad\x9b\xed\x62\x23\xee\xee\xb6\x8b\xf5\x52\xe2\x62\x21\x2a\xdc\x34\xdb\x0d\xae\xc4\x2d\x56\x79\x22\x98\xad\xaa\x46\x8e\xdb\x0b\x8f\x6c\xc5\x54\xbc\xab\x24\x01\x78\x56\xa6\x2e\x60\xf7\xf0\x30\x51\xf2\x67\x1f\x9a\xc1\xd1\x0a\x0d\x06\x39\x3c\x7e\xef\x76\x0f\x0f\x1f\xe0\x8b\xff\xa4\x69\xfa\xde\x8f\x9c\xdf\xc6\xca\xb4\xe5\xb4\x66\x8b\xb8\x90\x67\xe7\xb5\x7b\x79\xc7\xc2\x33\x3b\x81\x13\x80\x5e\x18\xd5\xa0\xe3\x52\x8c\xdc\x91\x2d\x60\xd7\xa1\x69\xe1\x37\x95\xfc\x13\x00\x00\xff\xff\x99\x19\xc5\xde\xea\x07\x00\x00"

func ssd_512_vgg16_atrous_vocYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_512_vgg16_atrous_vocYml,
		"SSD_512_VGG16_Atrous_VOC.yml",
	)
}

func ssd_512_vgg16_atrous_vocYml() (*asset, error) {
	bytes, err := ssd_512_vgg16_atrous_vocYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_512_VGG16_Atrous_VOC.yml", size: 2026, mode: os.FileMode(420), modTime: time.Unix(1554878884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v1_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x10\xc8\xa1\x33\x40\x6b\x27\x69\xda\x26\x3e\xec\x61\x33\xc0\xec\x61\x27\x05\x66\xb0\x1f\x37\x43\x96\x69\x5b\x5b\x59\x34\x24\xba\x49\xfa\xeb\x17\xfa\x48\xd2\x62\xba\x3b\x98\x8b\x61\x89\x8f\x22\x1f\xf9\x28\x19\x31\x60\x09\xdf\xbe\x7d\xaa\xbe\x50\xad\x34\xee\x90\xab\xe7\x45\xb5\x7d\xdc\x3e\xc2\x0c\xbc\x15\xa8\x85\x23\x4d\x16\x06\x6a\x50\x67\xad\x15\x03\xee\xc9\x3e\x95\x19\x40\xf4\xfe\xf2\xf7\x0e\x19\x66\x70\x36\x41\x4b\x16\xb8\xc7\xe4\x02\xf0\x8c\xd6\x29\x32\x25\x2c\xf2\x55\x3e\x7f\x03\x4d\x26\x90\x64\xd8\x0a\x65\x38\x7b\x05\xf6\xd0\x13\x40\x99\x96\xec\x20\x38\xfe\x83\xc3\x41\x18\x56\xf2\x6c\x8f\xd6\xcc\x9f\x23\x94\x41\x5b\xc2\x0c\xce\x0b\x07\x93\xc3\x06\x98\x60\x44\xeb\x91\x31\x35\xc0\x67\xa1\xa7\x70\x66\x06\x20\x86\xe6\x7e\xe5\x69\x01\x74\xe3\x54\x82\x15\x6a\xb4\xf4\x0f\x4a\x2e\xa4\xb0\x83\xbe\x91\xa2\x6d\xb1\x0c\xb0\x1b\x39\x4e\x01\x29\x7f\x88\xec\x02\x72\x1c\xe5\xfd\x4a\x63\xf9\x43\xa7\x04\x4c\x6e\xff\x9f\xca\x6b\x6c\x83\x4e\x5a\x35\x72\x28\xdd\x2f\x19\xa4\xb6\x3c\xd6\xde\x0b\x3e\x21\xa3\x0c\xb5\x0b\xc4\xaf\x61\xdf\x2b\xd9\x83\x72\x10\xaa\x8e\x0d\x90\x09\x2d\x0b\x9d\xff\xb0\xa5\x61\x20\x93\x9c\x9d\xaf\xf7\x96\x0c\xe3\x81\x3f\x42\x23\x58\x38\xe4\x3c\x03\xf8\xc3\x21\x38\xd7\x54\x77\x8b\x65\x35\x04\xf9\x18\xe4\x45\x3e\xaf\x24\x49\x82\xd6\xd2\x00\x9f\xf5\x44\x66\xfb\x67\x2a\xf7\x0b\x51\x9e\x59\x6c\xd1\xa2\x91\xe8\x7c\x8b\x2e\xab\xd0\x1d\x31\xfa\x66\x15\xb0\xc7\xda\x29\x46\xff\x8b\x2c\xf3\x1c\x22\xbd\x5a\x99\xee\x8d\xb2\x6e\xa0\x67\x1e\x5d\x59\x14\x9d\x8f\x74\x23\x9f\xf3\xe1\x60\x90\x73\x45\x45\xc0\x54\x2f\x44\x45\x73\x62\x9f\xf7\x3c\xe8\x4c\x2b\x89\xc6\x61\x09\x93\xb1\xe8\xd8\x2a\xc9\xd8\xc0\x0c\xd2\xbe\x57\xfc\x25\x86\x32\xe3\xc4\x21\xd5\xc8\x21\xae\x43\x68\x3e\x8e\x58\x82\x1a\x44\x87\x5e\xd3\xca\x3a\x8e\x66\x0f\x15\x5a\xf1\x31\x74\xf0\x4d\x67\xfc\xc1\x11\x73\xf2\x7b\x65\x3e\x45\x7e\x75\x54\x38\x61\x14\x7e\x5e\x18\xad\x8b\xfa\x01\x40\x8d\x03\x1a\xae\x62\x0a\xad\x26\xc1\xb7\xcb\x64\x0b\x7e\x95\x16\x47\x3f\x04\x57\x21\x4c\xc5\x68\x1c\xd9\xab\x84\xd0\xe2\x48\x13\x97\x70\xb5\xfd\xed\xaf\xd3\x9e\x24\x4d\xb6\xf2\x1c\x4b\xb8\xfa\xfa\xf9\xd7\xab\x8c\x26\x1e\x27\xf6\x11\x63\x94\x9a\x26\xd3\x28\xd3\xd5\x74\xc8\xde\x61\x15\xe1\x67\x14\xd4\x74\x80\x19\x88\xf7\xf8\x25\xe8\x99\x56\xf6\x3d\xc5\xff\x26\x58\xd3\x01\xdd\x99\xde\xb9\xb5\x55\xd8\x8f\x6c\x46\x4b\xb5\xa8\x95\x56\xac\xde\x85\x3a\x49\xf6\x84\x95\x5a\x38\xf7\x2e\x2a\x59\x22\xac\x45\xc1\x93\x45\x57\x4d\x56\x97\x67\xd1\xb9\xdb\x5c\x0c\xe2\x85\x8c\xd8\xbb\x5c\xd2\x50\x38\x26\x8b\x79\x98\xd1\x9c\x6c\x57\xb8\xa3\x71\xc8\xae\xf0\x13\x51\x68\x51\xa3\x76\x39\x1f\xf8\xed\x91\xb2\x47\xf9\xe4\xa6\xa1\x84\xd5\x6a\xb1\x96\xeb\xbb\x66\xbe\xc0\x7b\xb9\x5e\xb6\xed\xfd\x7a\xb5\xa9\xd7\xcb\xdb\xcd\xc3\xdd\x66\x75\xbb\xce\x82\x06\xbd\x18\xdd\x88\x52\xb5\x0a\x5d\x92\x65\x67\xc5\xd8\x83\x30\x0d\xec\x51\x75\x3d\x3b\x70\x34\x59\x89\x5e\xa9\xb5\x70\x18\xf2\xce\x20\xe2\xaa\x51\x70\xff\x13\x2c\x42\x08\x57\x44\x11\xb5\x9a\xf6\xa7\x1d\x3f\xfd\xe7\xc9\xf7\x0f\x87\xe7\x59\x2d\xe7\x8b\x75\x35\x5f\x54\xcb\x75\xd1\x5a\x7a\x41\x53\x29\x93\xa6\xbc\x0a\xf1\xf3\xb1\xce\x00\x94\xab\x84\x95\xbd\x7a\x4e\xb7\x62\x2b\xb4\xf3\x03\xa1\x5a\x60\x3b\xe1\xb5\x97\x4a\xbc\x94\x4e\x04\xfc\x7d\x25\xc0\xff\x30\x81\x30\x90\xdc\x83\xf7\x2c\x20\x2f\xf4\x5e\xd7\x22\x6e\x84\xe3\x1a\x34\xc4\xe8\xff\x93\x57\xab\x34\x86\x87\xcc\x9d\xd4\xf9\x7d\x29\xf7\x8a\x7b\x15\x53\xb9\x84\x8c\xa1\x2e\xbd\x93\x9b\xa6\xdd\xcc\xd7\xe2\xe1\x61\x33\xbf\x5f\x4a\x9c\xcf\x45\x8d\xeb\x76\xb3\xc6\x95\xb8\xc5\x7a\x91\x09\x66\xab\xea\x89\xe3\xc5\x87\x07\xb6\x22\x35\xef\x62\xc9\x00\x9e\x94\x69\x4a\xd8\xee\x76\x89\x92\x5f\xfb\xd4\x0c\x4e\x56\x68\x30\xc8\xe1\xe1\xfc\xb0\xdd\xed\xae\xe1\xab\xff\xe4\x79\xfe\xd1\x4f\xa9\xbf\xc9\x95\xe9\xaa\x74\x45\x97\x90\x9e\xf1\xb4\x3e\xbf\x81\xe1\x79\x4e\xe0\x0c\x60\x10\x46\xb5\xe8\xb8\x12\x13\xf7\x64\x4b\xd8\xf6\x68\x3a\xf8\x5d\x65\xff\x06\x00\x00\xff\xff\x14\xe9\x97\x97\x1e\x08\x00\x00"

func ssd_mobilenet_v1_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v1_cocoYml,
		"SSD_MobileNet_v1_COCO.yml",
	)
}

func ssd_mobilenet_v1_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v1_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v1_COCO.yml", size: 2078, mode: os.FileMode(420), modTime: time.Unix(1554878892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"AlexNet.yml": alexnetYml,
	"ResNet18_v1.yml": resnet18_v1Yml,
	"SSD_512_VGG16_Atrous_VOC.yml": ssd_512_vgg16_atrous_vocYml,
	"SSD_MobileNet_v1_COCO.yml": ssd_mobilenet_v1_cocoYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"AlexNet.yml": &bintree{alexnetYml, map[string]*bintree{}},
	"ResNet18_v1.yml": &bintree{resnet18_v1Yml, map[string]*bintree{}},
	"SSD_512_VGG16_Atrous_VOC.yml": &bintree{ssd_512_vgg16_atrous_vocYml, map[string]*bintree{}},
	"SSD_MobileNet_v1_COCO.yml": &bintree{ssd_mobilenet_v1_cocoYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

