// Code generated by go-bindata.
// sources:
// builtin_models/AlexNet.yml
// builtin_models/ResNet18_v1.yml
// builtin_models/SSD_512_VGG16_Atrous_VOC.yml
// builtin_models/SSD_MobileNet_v1_COCO.yml
// builtin_models/SqueezeNet_v1.yml
// DO NOT EDIT!

package mxnet

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _alexnetYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\xb0\x87\x6d\x81\x5d\x49\xb6\xb5\x8e\x57\x40\x03\xb4\x3e\xa4\x05\xda\x3d\x04\xe8\x03\x08\x02\x63\x44\x8d\x2c\x26\x14\x29\x90\x23\x3f\xf2\xeb\x0b\x3e\xfc\x4a\x17\x09\x7a\xd9\x15\x39\xdf\x0c\x3f\x7e\xf3\xa0\x35\x0e\x54\xc3\xcf\x8a\x0e\x2f\xc4\x70\x07\x7e\x0d\xa6\x83\xa3\x99\x2c\x0c\xa6\x25\x95\x75\x16\x07\xda\x1b\xfb\xb9\xce\x00\x22\xfe\x8f\x7f\x22\xfa\x6c\x82\xce\x58\xe0\x9e\x92\x0b\xc0\x8e\xac\x93\x46\xd7\x70\xff\xf6\xa7\x59\x3e\xcb\xcb\xfb\x1b\x78\x32\x83\x30\x9a\x2d\x4a\xcd\xd9\xd9\x61\x96\x97\x70\x77\x06\x48\xdd\x19\x3b\x20\xc7\x6f\x70\x34\xa0\x66\x29\xce\xf6\x68\xcd\x7c\x1c\x94\x9a\x6c\x0d\x77\x70\x5e\x38\x98\x1c\xb5\xc0\x06\x46\xb2\x1e\x19\xe9\x01\xed\x50\x4d\x21\x66\x06\x80\x43\xbb\xac\xfc\xd5\x00\xb6\xe3\x54\x83\x45\x39\x5a\xf3\x89\x04\x17\x02\xed\xa0\x1e\x05\x76\x1d\xd5\x01\xf6\x28\xc6\x29\x20\xc5\x77\x91\xdb\x80\x1c\x47\xb1\xac\x14\xd5\xdf\x75\x4a\xc0\xe4\xf6\x6d\x2a\xd7\xd8\x96\x9c\xb0\x72\xe4\x20\xdd\xdb\x0c\x52\x6a\x7e\x1b\x70\x4b\xb0\x56\xe8\x9c\xec\xa4\x88\xfa\x85\xcb\x3f\xc0\xbe\x97\xa2\x07\xe9\x20\x28\x4f\x2d\x18\x1d\x52\x17\x7c\xbc\x73\x8b\x8c\x8e\x38\xcf\x00\xfe\x74\x74\x2e\x8e\xce\x9a\x01\xde\xa9\xc9\xe8\xf5\x5f\x49\xc8\x2f\xc6\xe4\x99\xa5\x8e\x2c\x69\x41\xce\x8b\x7f\x59\x05\xdd\x71\xf4\x69\x28\x60\x4f\x8d\x93\x4c\xfe\x93\x58\xe4\x39\x44\xe2\x8d\xd4\xdb\x9b\xba\x79\x84\x9e\x79\x74\x75\x51\x6c\xfd\x49\x8f\x62\x97\x0f\x07\x4d\x9c\x4b\x53\x04\xcc\xe6\x8b\x31\x85\xb8\xb9\x58\xde\xf3\xf0\x95\xaf\xe4\x7e\x6a\x72\x61\x86\xa2\x1d\x94\x38\xc7\x2a\x1a\x65\x9a\x62\x40\xc7\x64\x8b\x28\x9c\xfb\x2a\x58\x21\xbd\x0c\x9a\xb8\xd8\x91\x95\xdd\x71\x33\x5a\x4a\x42\xe5\xe3\x31\x53\x52\x90\x76\x54\xc3\xa4\x2d\x39\xb6\x52\x30\xb5\x70\x07\x69\xdf\xb7\xce\xe5\x3a\x52\x8f\x13\x07\x55\xa2\x5c\x71\x1d\x98\xf2\x71\xa4\x1a\xc2\x59\xbe\x31\xa4\x75\x1c\xcd\x1e\x8a\x4a\xf2\x31\x94\xc1\x4d\x7a\x7d\xe0\x88\x39\xf9\x5d\x99\x4f\x27\x5f\x85\x0a\x11\x46\xf4\x4d\xc7\x64\x5d\x2c\x42\x00\x52\x34\x90\xe6\x4d\xa4\xd0\x29\x83\xbc\x98\x27\x5b\xf0\xdb\x28\x3c\xfa\x4e\xf2\x75\x90\xf6\x15\x1e\xcd\xc4\x35\xdc\xaf\x7f\xfd\xfb\x3e\xed\x09\xa3\x8c\xdd\xf8\x9b\xd5\x70\xff\xfe\xdd\x2f\xa7\xfd\x56\x0e\xa4\x7d\x73\xba\x1a\x3e\x2c\x1e\x60\x3e\xaf\xc2\x9f\x8f\xc9\x3e\x10\xea\x1a\x3e\x94\x79\xb5\x7a\x7a\x80\x32\xaf\x9e\x96\xe1\x5f\xb9\xfc\x98\x99\x89\xc7\x89\x3d\xd3\xbb\x70\x1b\xcf\xf1\x74\xb3\x68\xcb\x20\x69\x77\x9b\xb6\xe0\x81\xaf\x09\x12\xdd\x2e\x3a\x64\xaf\xa8\x9a\x30\x0a\x9b\x50\x84\x57\x9a\x79\x1e\x9e\xc3\x65\x2b\xfb\xb6\x86\xa3\x35\x0d\x36\x52\x49\x96\xe4\x36\x6c\x51\x3b\x3f\x79\x6a\x70\xa6\xe3\x01\x0f\xaf\x80\x92\xdc\x7e\xec\x49\xdd\xd2\xe1\xc4\xfc\x06\x05\x01\xe5\x67\xe0\x85\x70\xe4\xd2\x11\xf2\x64\xc9\x6d\x26\xab\xea\xd0\x02\x75\x51\xb8\x45\x8e\x03\x7e\x31\x1a\xf7\x2e\xf4\x81\x63\x63\x29\x0f\x63\x24\x37\x76\x5b\xb8\xa3\x76\xc4\xee\x52\xee\x71\x23\xe7\x03\xdf\x46\x15\x3d\x89\xcf\x6e\x1a\x6a\xa8\xda\xf9\xa2\x6a\x9e\x56\x8b\x05\x0a\xac\xaa\xe7\xf9\xaa\x5c\x3e\xe1\x6c\x55\xb6\xcd\xa2\x9c\x2d\x31\x0b\x55\xee\x25\x73\x23\x09\xd9\x79\xd6\xb1\xf0\xb7\x16\xc7\x1e\x50\xb7\xb0\x27\xb9\xed\xd9\x81\x33\x93\x15\xe4\x2f\xd0\xa0\xa3\xff\x47\x3d\xc4\x74\x45\x98\x0b\xb1\xb5\xc5\xae\x40\x45\x7e\x9d\x41\x3c\x6c\x33\x22\xf7\x75\x3c\xfe\xd1\x1d\x87\xc6\xa8\xfc\x93\x0b\x75\x92\x28\xdc\x20\xca\xb2\x2c\xf3\x90\x63\x4f\x49\xba\x0d\x5a\xd1\xcb\x5d\x1a\xdc\x1d\x2a\xe7\xdb\x4d\x76\xe0\x88\x1f\x7c\x06\x62\x1a\x4e\xdc\xfd\x34\x45\xf0\x1f\x6c\x00\x35\x24\xef\xe0\x1c\x0b\xf9\x42\xea\x5a\x86\xb8\x11\xc2\xb5\xa4\x0d\x93\xff\x4e\x5e\x9d\x54\x14\x9e\x5b\x77\xaa\x87\xff\xaa\xb8\x97\xdc\xa7\x8a\xb8\x1c\x19\x8f\xba\x4a\x1b\x36\xed\xd3\x1b\x12\xab\xd5\x72\xd1\x75\x0b\x5a\xd0\xfc\x99\x44\x5b\x11\xb6\xd5\xa2\x9d\x75\x57\x92\x5c\x9c\x9e\xcb\xa5\x4f\xf6\x1c\x97\xcd\xac\x6a\xa8\x45\x31\x6f\x85\x10\x0d\xae\x66\x6f\x56\x4f\xf3\xe7\x0c\x99\xad\x6c\x26\x8e\x53\x9f\x0e\x6c\x31\x25\xfb\x62\xc9\x00\x3e\x4b\xdd\xd6\xb0\x7e\x79\x49\x3a\xf8\xb5\xbf\x8f\xa6\xc9\xa2\x02\x4d\x1c\x7e\x0f\xfc\xb0\x7e\x79\x79\x80\xf7\xfe\x4f\x9e\xe7\x3f\xfa\x26\xf7\x33\x57\xea\xed\x26\xbd\x46\xf5\xe5\x7d\xba\x3b\xbd\x50\xe7\xe7\x3d\xfc\xfa\x48\x0e\x19\xc0\x80\x5a\x76\xe4\x78\x83\x13\xf7\xc6\xd6\xb0\xee\x49\x6f\xe1\x77\x99\xfd\x1b\x00\x00\xff\xff\x49\xf9\x5c\xb3\xef\x08\x00\x00"

func alexnetYmlBytes() ([]byte, error) {
	return bindataRead(
		_alexnetYml,
		"AlexNet.yml",
	)
}

func alexnetYml() (*asset, error) {
	bytes, err := alexnetYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "AlexNet.yml", size: 2287, mode: os.FileMode(420), modTime: time.Unix(1560661268, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _resnet18_v1Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\xe0\x83\x5b\x20\x2b\xc9\x6b\xaf\x23\x0b\x68\x0e\xf5\x21\x2d\xd0\xfa\x10\xa0\x8f\x9b\x31\xa2\x86\x16\x13\x8a\x14\xc8\x91\xbd\xde\x5f\x5f\x90\x94\x5f\x48\xda\xf4\x22\x48\x9c\xef\x9b\xe7\xa7\xa1\xc1\x9e\x6a\xf8\x44\x7e\x47\xbc\xa8\xf6\xc7\x05\xcc\x20\x9c\x81\x95\x70\xb6\xa3\x83\xde\xb6\xa4\x33\xe9\xb0\xa7\x93\x75\x5f\xea\x0c\x20\x71\x7e\xff\x7b\x47\x0c\x33\xb8\x9a\x40\x5a\x07\xdc\xd1\x44\x01\x38\x92\xf3\xca\x9a\x1a\xe6\x1f\x7e\x5a\xe4\x8b\xbc\x9c\x3f\xc0\x27\x33\x08\x6b\xd8\xa1\x32\x9c\x5d\x09\x8b\xbc\x84\xd9\x15\xa0\x8c\xb4\xae\x47\x4e\xef\xe0\xa9\x47\xc3\x4a\x5c\xed\xc9\x9a\x05\x3f\xa8\x0c\xb9\x1a\x66\x70\xfd\xf0\x30\x7a\x6a\x81\x2d\x0c\xe4\x02\x32\xa5\x07\x74\x44\x3d\x46\x9f\x19\x00\xf6\xed\x7a\x15\x4a\x03\x38\x0c\x63\x0d\x0e\xd5\xe0\xec\x67\x12\x5c\x08\x74\xbd\x7e\x12\x28\x25\xd5\x11\xf6\x24\x86\x31\x22\xc5\x77\x91\x87\x88\x1c\x06\xb1\x5e\x69\xaa\xbf\x4b\x9a\x80\x13\xed\xbf\x53\xb9\xc7\xb6\xe4\x85\x53\x03\xc7\xd6\x7d\xc8\x60\x1a\xcd\xaf\x3d\x1e\x08\xb6\x1a\xbd\x57\x52\x89\xd4\xbf\x58\xfc\x3b\x38\x75\x4a\x74\xa0\x3c\xc4\xce\x53\x0b\xd6\xc4\xd1\x45\x4e\x20\xb7\xc8\xe8\x89\xf3\x0c\xe0\x0f\x4f\xe0\xc8\x9b\x8b\x40\xa4\xb3\x3d\x7c\xd4\xa3\x35\xdb\x3f\xa7\x66\xbe\x59\x9b\x67\x8e\x24\x39\x32\x82\x7c\x18\xc0\xed\x2b\xf6\x1e\x87\x30\x8a\x02\x4e\xd4\x78\xc5\x14\x5e\x89\x45\x9e\x43\x4a\xbe\x51\xe6\xf0\xa0\x9d\x27\xe8\x98\x07\x5f\x17\xc5\x21\x44\x7a\x12\xc7\xbc\x7f\x35\xc4\xb9\xb2\x45\xc4\xec\xdf\xac\x2d\xc4\x43\x71\x79\xc7\xbd\xce\xb4\x12\x64\x3c\xd5\x30\x1a\x47\x9e\x9d\x12\x4c\x2d\xcc\x60\x3a\x0f\xc2\xbe\x05\x52\x66\x18\x39\xe6\x9b\x0a\x49\xdf\x31\x3e\x9f\x07\xaa\x41\xc5\x26\xce\x40\x2a\xe7\x39\x99\x03\x14\xb5\xe2\x73\x1c\xd2\x43\xf3\x83\xe3\x84\xb9\xf0\xee\xcc\x97\xc8\x77\xae\xa2\x87\x01\xc3\x2f\xc1\xe4\x7c\x92\x08\x00\x69\xea\xc9\xf0\x3e\xa5\x20\xb5\x45\x5e\x3e\x4f\xb6\xc8\xdb\x6b\x3c\x07\x9d\x87\x29\x4d\xe7\x1a\xcf\x76\xe4\x1a\xe6\xdb\x5f\xfe\x9a\x4f\x67\xc2\x6a\xeb\xf6\xa1\xb2\x1a\xe6\x9f\x3e\xfe\x3c\xcf\xec\xc8\xc3\xc8\x21\x4e\xf2\xdd\xd8\xd1\xb4\xca\x1c\x1a\xfb\x9a\x7d\xa3\x96\x04\xbf\xa2\xa0\xb1\xaf\x30\x03\xfc\x56\x55\x13\xf4\x5a\x4c\xf6\x75\x61\xff\x5e\xd6\xe0\x6c\x83\x8d\xd2\x8a\x15\xf9\x4b\x71\x65\x34\x49\x42\x1e\x1d\xf9\xfd\xe8\x74\x7d\x15\x85\x5f\xe6\xd8\xe3\x9b\x35\x78\xf2\xb9\xb0\x7d\xe1\xd9\x3a\xca\xe3\x1f\x92\x5b\x77\x28\xfc\xd9\x78\x62\x5f\x08\x2b\x6c\xa1\xb1\x21\xed\x73\x7e\xe5\x47\x97\xa2\x23\xf1\xc5\x8f\x7d\x0d\xab\xd5\xa2\x12\xd5\x4b\x5b\x2e\x68\x2d\xaa\x67\x29\xd7\xd5\x6a\xd3\x54\xcf\xcb\xcd\xfb\x97\xcd\x6a\x59\x65\x51\x1e\x41\x27\x7e\x20\xa1\xa4\x22\x3f\x29\xe6\xe0\x70\xe8\x00\x4d\x0b\x27\x52\x87\x8e\x3d\x78\x3b\x3a\x41\x41\x44\x0d\x7a\xba\xe5\xfd\x7f\xd2\x8e\x3e\x7d\x11\xa5\x9e\x94\x2f\x8e\xc5\xdd\xcf\x97\x41\x0a\xb8\x1f\x90\xbb\x3a\xa5\xf0\xe4\xcf\x7d\x63\x75\xfe\xd9\xc7\x5d\x36\xa5\xf1\x80\x28\xcb\xb2\xcc\xe3\x38\x42\x5a\xca\xef\xd1\x89\x4e\x1d\xa7\x9d\x24\x51\xfb\xa0\x55\x25\xc1\x13\xbf\x0b\xe3\x4c\xdb\xe0\x92\x7f\x58\x14\x08\xe1\x85\x2d\xa0\x81\x89\x1d\xc9\xb3\x88\xbc\x25\x75\xdf\x8a\x74\x10\xdd\xb5\x64\x2c\x53\x78\x9f\x58\x52\x69\x8a\x37\x89\xbf\x28\xe8\xeb\x4e\x9e\x14\x77\x2a\xa5\x72\x0b\x99\x42\xdd\x46\xd7\x2c\xca\x66\xb3\x58\x55\x6d\xb9\x6e\x16\xd5\x0a\x2b\x81\x2b\x94\xcb\xa6\x5c\x4b\x5a\x95\x4b\xba\x6b\xc9\x8d\x24\x71\x43\xeb\x97\x8a\xaa\xaa\x5d\x3d\xbf\x6c\x9a\x65\xf9\x1e\x5f\xca\x66\xb9\xc6\xb2\x2a\x9b\x56\x64\xc8\xec\x54\x33\x72\x5a\x66\xf4\xca\x0e\xa7\x81\xdf\x2c\x19\xc0\x17\x65\xda\x1a\xb6\xbb\xdd\xd4\x87\xf0\x1d\xea\x31\x34\x3a\xd4\x60\x88\xe3\x55\xf7\xc3\x76\xb7\x7b\x07\x9f\xc2\x23\xcf\xf3\x1f\xc3\xef\x17\xf6\xae\x32\x87\xfd\xb4\x68\xeb\xdb\xea\x9d\x5d\x96\xef\xf5\xe6\x8a\x17\xeb\x44\xc8\x00\x7a\x34\x4a\x92\xe7\x3d\x8e\xdc\x59\x57\xc3\xb6\x23\x73\x80\xdf\x54\xf6\x4f\x00\x00\x00\xff\xff\xfa\xa9\xb8\x83\xce\x07\x00\x00"

func resnet18_v1YmlBytes() ([]byte, error) {
	return bindataRead(
		_resnet18_v1Yml,
		"ResNet18_v1.yml",
	)
}

func resnet18_v1Yml() (*asset, error) {
	bytes, err := resnet18_v1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ResNet18_v1.yml", size: 1998, mode: os.FileMode(420), modTime: time.Unix(1560661271, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_512_vgg16_atrous_vocYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4b\x8f\xdb\x36\x10\xbe\xeb\x57\x0c\xe0\x83\x13\x20\x2b\x59\x5e\xc7\x6b\x0b\x68\x80\xd6\x01\xb6\x87\x76\x17\x48\xd0\x6d\x6f\x02\x45\x8d\x24\x76\x29\x8e\x40\x8e\xfc\xd8\x5f\x5f\x90\x94\xed\x5d\x24\x6d\xd0\x8b\x20\x72\xbe\x79\x7c\xf3\xa2\x11\x3d\x16\xf0\xf5\xeb\xe7\xf2\x63\xbe\x2c\x9f\xee\xef\xf3\x75\xf9\x33\x5b\x1a\x5d\xf9\xf4\xb8\x83\x19\x78\x00\x50\x03\x27\x1a\x2d\xf4\x54\xa3\x4e\x92\xc6\x8a\x1e\x0f\x64\x9f\x8b\x04\x20\x5a\xf8\xfd\xaf\x07\x64\x98\xc1\x45\x04\x0d\x59\xe0\x0e\x27\x1d\x80\x3d\x5a\xa7\xc8\x14\x30\xff\xf4\x53\x9e\xe6\xe9\x62\xfe\x06\x3e\x89\x41\x92\x61\x2b\x94\xe1\xe4\xa2\x90\xa7\x0b\x98\x5d\x00\xca\x34\x64\x7b\xc1\xf1\x1f\x1c\xf6\xc2\xb0\x92\x17\x79\x94\x26\xde\x8e\x50\x06\x6d\x01\x33\xb8\x1c\x1c\x8c\x0e\x6b\x60\x82\x01\xad\x47\xc6\xf0\x00\xf7\x42\x8f\xc1\x66\x02\x20\xfa\x7a\xbd\xf2\xd4\x00\xda\x61\x2c\xc0\x0a\x35\x58\xfa\x1b\x25\x67\x52\xd8\x5e\xdf\x48\xd1\x34\x58\x04\xd8\x8d\x1c\xc6\x80\x94\x3f\x44\xb6\x01\x39\x0c\x72\xbd\xd2\x58\xfc\x50\x69\x02\x4e\x6a\xff\x1d\xca\x6b\x6c\x8d\x4e\x5a\x35\x70\x48\xdd\xa7\x04\xa6\xd2\x3c\x56\x5e\x0b\x3e\x23\xa3\x0c\xb9\x0b\xc4\x3f\xc0\xa1\x53\xb2\x03\xe5\x20\x64\x1d\x6b\x20\x13\xca\xb6\x7b\xdc\x3d\xc2\xbb\x1d\xf5\x3d\x99\x49\xd9\xf9\x7c\xef\xc8\x30\x1e\xf9\x3d\xd4\x82\x85\x43\x4e\x13\x80\x3f\x1c\x82\x73\x75\x68\xa1\x7d\xdb\xe6\xeb\x52\xc4\x16\xda\x93\x84\xc6\x52\x0f\xf7\x7a\x24\xb3\x7b\x9a\xb2\xfd\x42\x94\x26\x16\x1b\xb4\x68\x24\x3a\x5f\xa1\xeb\x29\x14\x47\x0c\xbe\x56\x19\x1c\xb0\x72\x8a\xd1\xff\x22\xcb\x34\x85\xc8\xae\x52\xa6\x7d\xd3\x5c\x37\xd0\x31\x0f\xae\xc8\xb2\xd6\x7b\xba\x91\xfb\xb4\x3f\x1a\xe4\x54\x51\x16\x30\xe5\x0b\x51\x56\x9f\xc9\xa7\x1d\xf7\x3a\xd1\x4a\xa2\x71\x58\xc0\x68\x2c\x3a\xb6\x4a\x32\xd6\x30\x83\xe9\xde\x77\xfd\xd5\x87\x32\xc3\xc8\x21\xd4\xc8\x21\x9e\x83\x6b\x3e\x0d\x58\x80\xea\x45\x8b\xbe\xa5\x95\x75\x1c\xc5\x1e\x2a\xb4\xe2\x53\x28\xe0\x9b\xc2\x78\xc3\x11\x73\xd6\x7b\x25\x3e\x7b\x7e\x65\x2a\x58\x18\x84\x1f\x17\x46\xeb\x62\xfb\x00\xa0\xc6\x1e\x0d\x97\x31\x84\x46\x93\xe0\xdb\xe5\x24\x0b\x7a\xa5\x16\x27\x3f\x03\x73\x5f\xae\xf9\x24\xd1\xe2\x44\x23\x17\x30\xdf\xfd\xfa\xe7\xf9\x4e\x92\x26\x5b\x7a\x6e\x05\xcc\xbf\xdc\xff\x32\x4f\x68\xe4\x61\x64\xef\x29\x5a\xaf\x68\x34\xb5\x32\x6d\x45\xc7\xe4\x3b\x6c\x22\xfc\x82\x82\x8a\x8e\x30\x03\xf1\x3d\x5e\x13\xf4\x42\x27\xf9\x96\xda\xbf\x13\xab\xe8\x88\xee\x4c\x6b\x11\xf3\x62\xa9\x12\x95\xd2\x8a\xd5\x55\x94\xc7\x09\xd3\xc2\xb9\xeb\x65\x34\xd1\xa0\xe0\xd1\xa2\x2b\x47\xab\x8b\x4b\xe7\xb8\xdb\x54\xf4\xe2\x85\x8c\x38\xb8\x54\x52\x9f\x39\x26\x8b\x69\x98\xb3\x94\x6c\x9b\xb9\x93\x71\xc8\x2e\x93\x24\x29\xd3\xa2\x42\xed\x52\x3e\xf2\x5b\x93\xb2\x43\xf9\xec\xc6\xbe\x80\xd5\x2a\xdf\xc8\xcd\xc7\x7a\x91\xe3\x5a\x6e\x96\x4d\xb3\xde\xac\xb6\xd5\x66\x79\xbb\xbd\xfb\xb8\x5d\xdd\x6e\x92\xd0\x48\xbe\xa3\xdc\x80\x52\x35\x0a\xdd\xd4\x5b\xad\x15\x43\x07\xc2\xd4\x70\x40\xd5\x76\xec\xc0\xd1\x68\x25\xfa\x76\xab\x84\xc3\x10\x77\x02\x11\x57\x0e\x82\xbb\xff\xc1\x22\xb8\x70\x19\xa3\x71\x64\x1b\x4d\x87\xf3\x8d\x9f\xe0\x9e\x2a\xa5\xd1\x20\x97\xfb\xbc\xf4\x3c\xcb\xe5\x22\xdf\x94\x8b\xbc\x5c\x6e\xb2\xc6\xd2\x0b\x9a\x52\x99\x69\x54\xcb\xe0\x3f\x1d\xaa\x04\x40\xb9\x52\x58\xd9\xa9\xfd\xb4\xd9\x1a\xa1\x9d\xef\x6a\xd5\x00\xdb\x11\x3f\xf8\xba\xc7\xc5\x72\x26\xe0\x77\x8e\x00\xff\xc3\x04\xc2\xc0\xa4\x1e\xb4\x67\x01\x79\xa5\xf7\x3a\x17\xf1\x22\x98\xab\xd1\x10\xa3\xff\x9f\xb4\x1a\xa5\x31\x3c\x48\xee\xdc\x6a\xdf\xa6\xf2\xa0\xb8\x53\x31\x94\xab\xcb\xe8\xea\x5a\x3b\xb9\xad\x9b\xed\x62\x23\xee\xee\xb6\x8b\xf5\x52\xe2\x62\x21\x2a\xdc\x34\xdb\x0d\xae\xc4\x2d\x56\x79\x22\x98\xad\xaa\x46\x8e\xdb\x0b\x8f\x6c\xc5\x54\xbc\xab\x24\x01\x78\x56\xa6\x2e\x60\xf7\xf0\x30\x51\xf2\x67\x1f\x9a\xc1\xd1\x0a\x0d\x06\x39\x3c\x7e\xef\x76\x0f\x0f\x1f\xe0\x8b\xff\xa4\x69\xfa\xde\x8f\x9c\xdf\xc6\xca\xb4\xe5\xb4\x66\x8b\xb8\x90\x67\xe7\xb5\x7b\x79\xc7\xc2\x33\x3b\x81\x13\x80\x5e\x18\xd5\xa0\xe3\x52\x8c\xdc\x91\x2d\x60\xd7\xa1\x69\xe1\x37\x95\xfc\x13\x00\x00\xff\xff\x99\x19\xc5\xde\xea\x07\x00\x00"

func ssd_512_vgg16_atrous_vocYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_512_vgg16_atrous_vocYml,
		"SSD_512_VGG16_Atrous_VOC.yml",
	)
}

func ssd_512_vgg16_atrous_vocYml() (*asset, error) {
	bytes, err := ssd_512_vgg16_atrous_vocYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_512_VGG16_Atrous_VOC.yml", size: 2026, mode: os.FileMode(420), modTime: time.Unix(1554878884, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _ssd_mobilenet_v1_cocoYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\x4d\x6f\xe3\x38\x0c\xbd\xfb\x57\x10\xc8\xa1\x33\x40\x6b\x27\x69\xda\x26\x3e\xec\x61\x33\xc0\xec\x61\x27\x05\x66\xb0\x1f\x37\x43\x96\x69\x5b\x5b\x59\x34\x24\xba\x49\xfa\xeb\x17\xfa\x48\xd2\x62\xba\x3b\x98\x8b\x61\x89\x8f\x22\x1f\xf9\x28\x19\x31\x60\x09\xdf\xbe\x7d\xaa\xbe\x50\xad\x34\xee\x90\xab\xe7\x45\xb5\x7d\xdc\x3e\xc2\x0c\xbc\x15\xa8\x85\x23\x4d\x16\x06\x6a\x50\x67\xad\x15\x03\xee\xc9\x3e\x95\x19\x40\xf4\xfe\xf2\xf7\x0e\x19\x66\x70\x36\x41\x4b\x16\xb8\xc7\xe4\x02\xf0\x8c\xd6\x29\x32\x25\x2c\xf2\x55\x3e\x7f\x03\x4d\x26\x90\x64\xd8\x0a\x65\x38\x7b\x05\xf6\xd0\x13\x40\x99\x96\xec\x20\x38\xfe\x83\xc3\x41\x18\x56\xf2\x6c\x8f\xd6\xcc\x9f\x23\x94\x41\x5b\xc2\x0c\xce\x0b\x07\x93\xc3\x06\x98\x60\x44\xeb\x91\x31\x35\xc0\x67\xa1\xa7\x70\x66\x06\x20\x86\xe6\x7e\xe5\x69\x01\x74\xe3\x54\x82\x15\x6a\xb4\xf4\x0f\x4a\x2e\xa4\xb0\x83\xbe\x91\xa2\x6d\xb1\x0c\xb0\x1b\x39\x4e\x01\x29\x7f\x88\xec\x02\x72\x1c\xe5\xfd\x4a\x63\xf9\x43\xa7\x04\x4c\x6e\xff\x9f\xca\x6b\x6c\x83\x4e\x5a\x35\x72\x28\xdd\x2f\x19\xa4\xb6\x3c\xd6\xde\x0b\x3e\x21\xa3\x0c\xb5\x0b\xc4\xaf\x61\xdf\x2b\xd9\x83\x72\x10\xaa\x8e\x0d\x90\x09\x2d\x0b\x9d\xff\xb0\xa5\x61\x20\x93\x9c\x9d\xaf\xf7\x96\x0c\xe3\x81\x3f\x42\x23\x58\x38\xe4\x3c\x03\xf8\xc3\x21\x38\xd7\x54\x77\x8b\x65\x35\x04\xf9\x18\xe4\x45\x3e\xaf\x24\x49\x82\xd6\xd2\x00\x9f\xf5\x44\x66\xfb\x67\x2a\xf7\x0b\x51\x9e\x59\x6c\xd1\xa2\x91\xe8\x7c\x8b\x2e\xab\xd0\x1d\x31\xfa\x66\x15\xb0\xc7\xda\x29\x46\xff\x8b\x2c\xf3\x1c\x22\xbd\x5a\x99\xee\x8d\xb2\x6e\xa0\x67\x1e\x5d\x59\x14\x9d\x8f\x74\x23\x9f\xf3\xe1\x60\x90\x73\x45\x45\xc0\x54\x2f\x44\x45\x73\x62\x9f\xf7\x3c\xe8\x4c\x2b\x89\xc6\x61\x09\x93\xb1\xe8\xd8\x2a\xc9\xd8\xc0\x0c\xd2\xbe\x57\xfc\x25\x86\x32\xe3\xc4\x21\xd5\xc8\x21\xae\x43\x68\x3e\x8e\x58\x82\x1a\x44\x87\x5e\xd3\xca\x3a\x8e\x66\x0f\x15\x5a\xf1\x31\x74\xf0\x4d\x67\xfc\xc1\x11\x73\xf2\x7b\x65\x3e\x45\x7e\x75\x54\x38\x61\x14\x7e\x5e\x18\xad\x8b\xfa\x01\x40\x8d\x03\x1a\xae\x62\x0a\xad\x26\xc1\xb7\xcb\x64\x0b\x7e\x95\x16\x47\x3f\x04\x57\x21\x4c\xc5\x68\x1c\xd9\xab\x84\xd0\xe2\x48\x13\x97\x70\xb5\xfd\xed\xaf\xd3\x9e\x24\x4d\xb6\xf2\x1c\x4b\xb8\xfa\xfa\xf9\xd7\xab\x8c\x26\x1e\x27\xf6\x11\x63\x94\x9a\x26\xd3\x28\xd3\xd5\x74\xc8\xde\x61\x15\xe1\x67\x14\xd4\x74\x80\x19\x88\xf7\xf8\x25\xe8\x99\x56\xf6\x3d\xc5\xff\x26\x58\xd3\x01\xdd\x99\xde\xb9\xb5\x55\xd8\x8f\x6c\x46\x4b\xb5\xa8\x95\x56\xac\xde\x85\x3a\x49\xf6\x84\x95\x5a\x38\xf7\x2e\x2a\x59\x22\xac\x45\xc1\x93\x45\x57\x4d\x56\x97\x67\xd1\xb9\xdb\x5c\x0c\xe2\x85\x8c\xd8\xbb\x5c\xd2\x50\x38\x26\x8b\x79\x98\xd1\x9c\x6c\x57\xb8\xa3\x71\xc8\xae\xf0\x13\x51\x68\x51\xa3\x76\x39\x1f\xf8\xed\x91\xb2\x47\xf9\xe4\xa6\xa1\x84\xd5\x6a\xb1\x96\xeb\xbb\x66\xbe\xc0\x7b\xb9\x5e\xb6\xed\xfd\x7a\xb5\xa9\xd7\xcb\xdb\xcd\xc3\xdd\x66\x75\xbb\xce\x82\x06\xbd\x18\xdd\x88\x52\xb5\x0a\x5d\x92\x65\x67\xc5\xd8\x83\x30\x0d\xec\x51\x75\x3d\x3b\x70\x34\x59\x89\x5e\xa9\xb5\x70\x18\xf2\xce\x20\xe2\xaa\x51\x70\xff\x13\x2c\x42\x08\x57\x44\x11\xb5\x9a\xf6\xa7\x1d\x3f\xfd\xe7\xc9\xf7\x0f\x87\xe7\x59\x2d\xe7\x8b\x75\x35\x5f\x54\xcb\x75\xd1\x5a\x7a\x41\x53\x29\x93\xa6\xbc\x0a\xf1\xf3\xb1\xce\x00\x94\xab\x84\x95\xbd\x7a\x4e\xb7\x62\x2b\xb4\xf3\x03\xa1\x5a\x60\x3b\xe1\xb5\x97\x4a\xbc\x94\x4e\x04\xfc\x7d\x25\xc0\xff\x30\x81\x30\x90\xdc\x83\xf7\x2c\x20\x2f\xf4\x5e\xd7\x22\x6e\x84\xe3\x1a\x34\xc4\xe8\xff\x93\x57\xab\x34\x86\x87\xcc\x9d\xd4\xf9\x7d\x29\xf7\x8a\x7b\x15\x53\xb9\x84\x8c\xa1\x2e\xbd\x93\x9b\xa6\xdd\xcc\xd7\xe2\xe1\x61\x33\xbf\x5f\x4a\x9c\xcf\x45\x8d\xeb\x76\xb3\xc6\x95\xb8\xc5\x7a\x91\x09\x66\xab\xea\x89\xe3\xc5\x87\x07\xb6\x22\x35\xef\x62\xc9\x00\x9e\x94\x69\x4a\xd8\xee\x76\x89\x92\x5f\xfb\xd4\x0c\x4e\x56\x68\x30\xc8\xe1\xe1\xfc\xb0\xdd\xed\xae\xe1\xab\xff\xe4\x79\xfe\xd1\x4f\xa9\xbf\xc9\x95\xe9\xaa\x74\x45\x97\x90\x9e\xf1\xb4\x3e\xbf\x81\xe1\x79\x4e\xe0\x0c\x60\x10\x46\xb5\xe8\xb8\x12\x13\xf7\x64\x4b\xd8\xf6\x68\x3a\xf8\x5d\x65\xff\x06\x00\x00\xff\xff\x14\xe9\x97\x97\x1e\x08\x00\x00"

func ssd_mobilenet_v1_cocoYmlBytes() ([]byte, error) {
	return bindataRead(
		_ssd_mobilenet_v1_cocoYml,
		"SSD_MobileNet_v1_COCO.yml",
	)
}

func ssd_mobilenet_v1_cocoYml() (*asset, error) {
	bytes, err := ssd_mobilenet_v1_cocoYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SSD_MobileNet_v1_COCO.yml", size: 2078, mode: os.FileMode(420), modTime: time.Unix(1554878892, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _squeezenet_v1Yml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x56\x4d\x6f\xe3\x36\x13\xbe\xeb\x57\x0c\xe0\x43\xde\x17\x48\x24\x59\x76\x0c\x5b\x40\xf7\xd0\x1c\xb6\x05\xda\x1c\xb6\xe8\x07\xb0\x58\x18\x23\x6a\x68\x71\x57\x22\x55\x72\xe4\xc4\xf9\xf5\x05\x3f\x6c\xc5\xdb\x60\x17\xbd\xd8\x12\xe7\x79\x86\x33\xcf\xcc\x90\xd2\x38\x50\x0d\xbf\xfd\x3d\x11\xbd\xd0\x23\xf1\xfe\xb8\x84\x05\xf8\x55\x30\x12\x4e\x66\xb2\x30\x98\x96\xfa\x4c\x5a\x1c\xe8\xc9\xd8\x2f\x75\x06\x10\x59\xbf\xfe\xf5\x48\x0c\x0b\xb8\x98\x40\x1a\x0b\xdc\x51\xa2\x00\x1c\xc9\x3a\x65\x74\x0d\x37\xef\x7e\x58\xe6\xcb\xbc\xbc\xb9\x82\x27\x33\x08\xa3\xd9\xa2\xd2\x9c\x5d\x08\xcb\xbc\x84\xc5\x05\xa0\xb4\x34\x76\x40\x8e\xcf\xe0\x68\x40\xcd\x4a\x5c\xec\xd1\x9a\x79\x3f\xa8\x34\xd9\x1a\x16\x70\x79\x71\x30\x39\x6a\x81\x0d\x8c\x64\x3d\x32\x86\x07\x74\xc4\x7e\x0a\x3e\x33\x00\x1c\xda\xcd\xda\xa7\x06\x70\x18\xa7\x1a\x2c\xaa\xd1\x9a\xcf\x24\xb8\x10\x68\x87\xfe\x4e\xa0\x94\x54\x07\xd8\x9d\x18\xa7\x80\x14\xdf\x45\x1e\x02\x72\x1c\xc5\x66\xdd\x53\xfd\x5d\x52\x02\x26\xda\xb7\x43\x79\x8d\x6d\xc9\x09\xab\x46\x0e\xd2\xbd\xcb\x20\x95\xe6\xe7\x01\x0f\x04\x0f\x3d\x3a\xa7\xa4\x12\x51\xbf\x90\xfc\x2d\x3c\x75\x4a\x74\xa0\x1c\x04\xe5\xa9\x05\xa3\x43\xe9\x02\xc7\x93\x5b\x64\x74\xc4\x79\x06\xf0\xbb\xa3\xaf\x5a\x44\x5a\x33\xc0\xfb\x7e\x32\xfa\xe1\x8f\x24\xe7\x8b\x31\x79\x66\x49\x92\x25\x2d\xc8\xf9\x12\xcc\x6f\x41\x7d\x1c\x7d\x31\x0a\x78\xa2\xc6\x29\x26\xff\x48\x2c\xf2\x1c\x62\xf8\x8d\xd2\x87\xab\xee\xb9\x83\x8e\x79\x74\x75\x51\x1c\xfc\x4e\x77\xe2\x98\x0f\xcf\x9a\x38\x57\xa6\x08\x98\xfd\x8b\x31\x85\xb8\x4a\x2f\xef\x78\xf8\x8a\xab\xb8\x9b\x9a\x5c\x98\xa1\x68\x87\x5e\x5c\x7c\x15\x4d\x6f\x9a\x62\x40\xc7\x64\x8b\x28\x9f\xfb\xca\x59\xa1\xbc\x18\x9a\xb8\x38\x92\x55\xf2\xb4\x1f\x2d\x25\xb9\xf2\xf1\x94\xf5\x4a\x90\x76\x54\xc3\xa4\x2d\x39\xb6\x4a\x30\xb5\xb0\x80\xb4\xee\x07\x68\x4e\x47\xe9\x71\xe2\xa0\x4a\x94\x2b\xbe\x87\x48\xf9\x34\x52\x0d\x61\x2f\x3f\x1e\xca\x3a\x8e\x66\x0f\xc5\x5e\xf1\x29\x34\xc3\x55\x91\xbd\xe3\x88\x39\xf3\x5e\x99\xcf\x3b\xbf\x72\x15\x3c\x8c\xe8\x47\x8f\xc9\xba\xd8\x8a\x00\xd4\xd3\x40\x9a\xf7\x31\x04\xd9\x1b\xe4\x55\x95\x6c\x81\xb7\xef\xf1\xe4\xe7\xc9\x77\x43\x5a\xef\xf1\x64\x26\xae\xe1\xe6\xe1\xa7\x3f\x6f\xd2\x9a\x30\xbd\xb1\x7b\x9f\x59\x0d\x37\x1f\xde\xff\x78\x5e\x6f\xd5\x40\xda\x8f\xa8\xab\xe1\xe3\xea\x16\xaa\x6a\x1d\x7e\x3e\x25\xfb\x40\xa8\x6b\xf8\x58\xe6\xeb\xed\xfd\x2d\x94\xf9\xfa\x7e\x13\xfe\xca\xcd\x19\xe1\x04\xf6\x14\x20\x55\xb5\xf3\xb6\xe0\xc2\xff\xdd\x7f\xca\xcc\xc4\xe3\xc4\x3e\x99\x45\x48\xd8\xa7\x71\x4e\x3e\xda\x32\x48\xf2\x5e\x57\x36\x30\xf0\x2d\xcd\x22\x6d\x96\x2a\x7b\x43\xf8\x84\xe9\xb1\x09\x7d\xfa\x4a\x56\x1f\x87\x8f\x61\x5e\xca\xbe\x2d\xf3\x68\x4d\x83\x8d\xea\x15\x2b\x72\x7b\xb6\xa8\x9d\x3f\xa2\x6a\x70\x46\xf2\x80\xcf\x6f\x80\x52\x45\xfc\xf9\xa8\x74\x4b\xcf\xe7\xc8\xaf\x50\x10\x50\xfe\xb0\x9c\x03\x8e\xb1\x48\x42\x9e\x2c\xb9\xfd\x64\xfb\x3a\x4c\x49\x5d\x14\x6e\x95\xe3\x80\x2f\x46\xe3\x93\x0b\xa3\xe2\xd8\x58\xca\xc3\x79\x93\x1b\x7b\x28\xdc\x49\x3b\x62\x37\x4f\x44\x5c\xc8\xf9\x99\xaf\xbd\x8a\x8e\xc4\x17\x37\x0d\x35\xac\xdb\x6a\xb5\x6e\xee\xb7\xab\x15\x0a\x5c\xaf\x77\xd5\xb6\xdc\xdc\xe3\x72\x5b\xb6\xcd\xaa\x5c\x6e\x30\x0b\x83\xe0\x25\x73\x23\x09\x25\x7d\xd4\x71\x36\x0e\x16\xc7\x0e\x50\xb7\xf0\x44\xea\xd0\xb1\x03\x67\x26\x2b\xc8\x27\xd0\xa0\xa3\xff\x16\x7a\xf0\xe9\x8a\x70\x74\xc4\xe9\x17\xc7\xc2\xc5\xe3\x4c\x13\x2f\xf3\x32\x83\xb8\xe5\x7e\x44\xee\xea\x18\xc4\x9d\x3b\x0d\x8d\xe9\xf3\xcf\x2e\x74\x4b\x0a\xe4\x0a\x51\x96\x65\x99\x87\x4a\xfb\xc0\x94\xdb\xa3\x15\x9d\x3a\xa6\x73\x5e\x62\xef\xfc\x5c\x2a\x09\x8e\xf8\xd6\xd7\x21\x16\xe3\x9c\x81\x3f\x7c\x11\xfc\x03\x1b\x40\x0d\x89\x1d\xc8\xb1\x9d\xe7\xa0\x5e\x8b\x11\x17\x82\xbb\x96\xb4\x61\xf2\xcf\x89\x25\x55\x4f\xe1\x76\x76\xe7\xae\xf8\xb7\x96\x4f\x8a\xbb\xd4\x17\xf3\x96\x71\xab\xb9\x78\x6d\x2b\xcb\xe5\x5a\x6e\x9b\x75\x45\xd5\xa6\xdd\xb6\x9b\x52\xee\x84\xb8\xdf\x96\x2b\xb9\x15\x72\xf5\x4a\x92\x99\xe4\x0d\xbb\x0d\x55\x24\xaa\xf5\x66\xb7\x2c\xab\x52\x22\x55\x3b\x29\xc5\x6e\xdb\x6c\xb7\x98\x21\xb3\x55\xcd\xc4\xf1\x7a\xa0\x67\xb6\x98\x4a\x3e\x5b\x32\x80\x2f\x4a\xb7\x35\x3c\x3c\x3e\x26\x1d\xfc\xbb\xcf\x47\xd3\x64\xb1\x07\x4d\x1c\x3e\x1f\xfe\xf7\xf0\xf8\x78\x0b\x1f\xfc\x4f\x9e\xe7\xff\xf7\xa3\xee\x0f\x67\xa5\x0f\xfb\x74\x79\xd5\xf3\x75\xb6\x38\x5f\x68\x97\xaf\x81\xf0\xb1\x92\x08\x19\xc0\x80\x5a\x49\x72\xbc\xc7\x89\x3b\x63\x6b\x78\xe8\x48\x1f\xe0\x17\x95\xfd\x13\x00\x00\xff\xff\x7f\xae\xa1\x48\x24\x09\x00\x00"

func squeezenet_v1YmlBytes() ([]byte, error) {
	return bindataRead(
		_squeezenet_v1Yml,
		"SqueezeNet_v1.yml",
	)
}

func squeezenet_v1Yml() (*asset, error) {
	bytes, err := squeezenet_v1YmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "SqueezeNet_v1.yml", size: 2340, mode: os.FileMode(420), modTime: time.Unix(1560661263, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"AlexNet.yml": alexnetYml,
	"ResNet18_v1.yml": resnet18_v1Yml,
	"SSD_512_VGG16_Atrous_VOC.yml": ssd_512_vgg16_atrous_vocYml,
	"SSD_MobileNet_v1_COCO.yml": ssd_mobilenet_v1_cocoYml,
	"SqueezeNet_v1.yml": squeezenet_v1Yml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"AlexNet.yml": &bintree{alexnetYml, map[string]*bintree{}},
	"ResNet18_v1.yml": &bintree{resnet18_v1Yml, map[string]*bintree{}},
	"SSD_512_VGG16_Atrous_VOC.yml": &bintree{ssd_512_vgg16_atrous_vocYml, map[string]*bintree{}},
	"SSD_MobileNet_v1_COCO.yml": &bintree{ssd_mobilenet_v1_cocoYml, map[string]*bintree{}},
	"SqueezeNet_v1.yml": &bintree{squeezenet_v1Yml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

